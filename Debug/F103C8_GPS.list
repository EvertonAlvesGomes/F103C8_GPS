
F103C8_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002470  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800257c  0800257c  0001257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800269c  0800269c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800269c  0800269c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800269c  0800269c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080026a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000078  0800271c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  0800271c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069a1  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000148d  00000000  00000000  00026a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000610  00000000  00000000  00027ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  000284e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f9c  00000000  00000000  00028a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b34  00000000  00000000  0003f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081fd9  00000000  00000000  00045508  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c74e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000201c  00000000  00000000  000c755c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002564 	.word	0x08002564

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002564 	.word	0x08002564

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GPS_is_GLL_message>:
	flag_start = 1;
	return flag_start;
}

_Bool GPS_is_GLL_message(unsigned char *data)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	_Bool isGLL = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	73fb      	strb	r3, [r7, #15]
	if(!strncmp(data, "$GPGLL", 6)) {
 8000168:	2206      	movs	r2, #6
 800016a:	4907      	ldr	r1, [pc, #28]	; (8000188 <GPS_is_GLL_message+0x2c>)
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f001 fb3f 	bl	80017f0 <strncmp>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d101      	bne.n	800017c <GPS_is_GLL_message+0x20>
		isGLL = 1;
 8000178:	2301      	movs	r3, #1
 800017a:	73fb      	strb	r3, [r7, #15]
	}
	return isGLL;
 800017c:	7bfb      	ldrb	r3, [r7, #15]
}
 800017e:	4618      	mov	r0, r3
 8000180:	3710      	adds	r7, #16
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	08002580 	.word	0x08002580

0800018c <GPS_is_RMC_message>:


_Bool GPS_is_RMC_message(unsigned char *data)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	_Bool isRMC = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	73fb      	strb	r3, [r7, #15]
	if(!strncmp(data, "$GPRMC", 6)) {
 8000198:	2206      	movs	r2, #6
 800019a:	4907      	ldr	r1, [pc, #28]	; (80001b8 <GPS_is_RMC_message+0x2c>)
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f001 fb27 	bl	80017f0 <strncmp>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d101      	bne.n	80001ac <GPS_is_RMC_message+0x20>
		isRMC = 1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	73fb      	strb	r3, [r7, #15]
	}
	return isRMC;
 80001ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	08002588 	.word	0x08002588

080001bc <GPS_is_GSA_message>:


_Bool GPS_is_GSA_message(unsigned char *data)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	_Bool isGSA = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	73fb      	strb	r3, [r7, #15]
	if(!strncmp(data, "$GPGSA", 6)) {
 80001c8:	2206      	movs	r2, #6
 80001ca:	4907      	ldr	r1, [pc, #28]	; (80001e8 <GPS_is_GSA_message+0x2c>)
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f001 fb0f 	bl	80017f0 <strncmp>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d101      	bne.n	80001dc <GPS_is_GSA_message+0x20>
		isGSA = 1;
 80001d8:	2301      	movs	r3, #1
 80001da:	73fb      	strb	r3, [r7, #15]
	}
	return isGSA;
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3710      	adds	r7, #16
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	08002590 	.word	0x08002590

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b09c      	sub	sp, #112	; 0x70
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char gps_data[100];
	int i = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	66fb      	str	r3, [r7, #108]	; 0x6c
	float lat=0, longt=0;
 80001f6:	f04f 0300 	mov.w	r3, #0
 80001fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	667b      	str	r3, [r7, #100]	; 0x64


	initialise_monitor_handles();
 8000202:	f002 f935 	bl	8002470 <initialise_monitor_handles>
	printf("Iniciando GPS..\n");
 8000206:	481b      	ldr	r0, [pc, #108]	; (8000274 <main+0x88>)
 8000208:	f001 faea 	bl	80017e0 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020c:	f000 f9da 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000210:	f000 f83a 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000214:	f000 f8a8 	bl	8000368 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000218:	f000 f87c 	bl	8000314 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, gps_data, 100, HAL_MAX_DELAY);
 800021c:	4639      	mov	r1, r7
 800021e:	f04f 33ff 	mov.w	r3, #4294967295
 8000222:	2264      	movs	r2, #100	; 0x64
 8000224:	4814      	ldr	r0, [pc, #80]	; (8000278 <main+0x8c>)
 8000226:	f001 f8d6 	bl	80013d6 <HAL_UART_Receive>
	  if(GPS_is_GLL_message(gps_data)) {
 800022a:	463b      	mov	r3, r7
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ff95 	bl	800015c <GPS_is_GLL_message>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d003      	beq.n	8000240 <main+0x54>
		  puts("GLL Message was found\n");
 8000238:	4810      	ldr	r0, [pc, #64]	; (800027c <main+0x90>)
 800023a:	f001 fad1 	bl	80017e0 <puts>
 800023e:	e014      	b.n	800026a <main+0x7e>
	  }
	  else if(GPS_is_RMC_message(gps_data)) {
 8000240:	463b      	mov	r3, r7
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ffa2 	bl	800018c <GPS_is_RMC_message>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d003      	beq.n	8000256 <main+0x6a>
		  puts("RMC Message was found\n");
 800024e:	480c      	ldr	r0, [pc, #48]	; (8000280 <main+0x94>)
 8000250:	f001 fac6 	bl	80017e0 <puts>
 8000254:	e009      	b.n	800026a <main+0x7e>
	  }
	  else if(GPS_is_GSA_message(gps_data)) {
 8000256:	463b      	mov	r3, r7
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ffaf 	bl	80001bc <GPS_is_GSA_message>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <main+0x7e>
		  puts("GSA Message was found\n");
 8000264:	4807      	ldr	r0, [pc, #28]	; (8000284 <main+0x98>)
 8000266:	f001 fabb 	bl	80017e0 <puts>
	  }
	  puts(gps_data);
 800026a:	463b      	mov	r3, r7
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fab7 	bl	80017e0 <puts>
	  HAL_UART_Receive(&huart1, gps_data, 100, HAL_MAX_DELAY);
 8000272:	e7d3      	b.n	800021c <main+0x30>
 8000274:	08002598 	.word	0x08002598
 8000278:	2000014c 	.word	0x2000014c
 800027c:	080025a8 	.word	0x080025a8
 8000280:	080025c0 	.word	0x080025c0
 8000284:	080025d8 	.word	0x080025d8

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	; 0x40
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fa3e 	bl	8001718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002aa:	2301      	movs	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fc17 	bl	8000b04 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002dc:	f000 f866 	bl	80003ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fe82 	bl	8001004 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000306:	f000 f851 	bl	80003ac <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3740      	adds	r7, #64	; 0x40
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800031a:	4a12      	ldr	r2, [pc, #72]	; (8000364 <MX_USART1_UART_Init+0x50>)
 800031c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800034c:	f000 fff6 	bl	800133c <HAL_UART_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000356:	f000 f829 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000014c 	.word	0x2000014c
 8000364:	40013800 	.word	0x40013800

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000374:	f043 0320 	orr.w	r3, r3, #32
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_GPIO_Init+0x40>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0320 	and.w	r3, r3, #32
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <MX_GPIO_Init+0x40>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <Error_Handler+0x6>

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <HAL_MspInit+0x5c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x5c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_MspInit+0x60>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <HAL_MspInit+0x60>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	40010000 	.word	0x40010000

08000418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <HAL_UART_MspInit+0x8c>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d131      	bne.n	800049c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_UART_MspInit+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <HAL_UART_MspInit+0x90>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <HAL_UART_MspInit+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_UART_MspInit+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_UART_MspInit+0x90>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_UART_MspInit+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800046c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	2302      	movs	r3, #2
 8000470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000472:	2303      	movs	r3, #3
 8000474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <HAL_UART_MspInit+0x94>)
 800047e:	f000 f9e7 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <HAL_UART_MspInit+0x94>)
 8000498:	f000 f9da 	bl	8000850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40013800 	.word	0x40013800
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f6:	f000 f8ab 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <_sbrk+0x5c>)
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <_sbrk+0x60>)
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <_sbrk+0x64>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <_sbrk+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	429a      	cmp	r2, r3
 800052e:	d207      	bcs.n	8000540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000530:	f001 f8c8 	bl	80016c4 <__errno>
 8000534:	4602      	mov	r2, r0
 8000536:	230c      	movs	r3, #12
 8000538:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	e009      	b.n	8000554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <_sbrk+0x64>)
 8000550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20005000 	.word	0x20005000
 8000560:	00000400 	.word	0x00000400
 8000564:	20000094 	.word	0x20000094
 8000568:	20000198 	.word	0x20000198

0800056c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000578:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800057a:	e003      	b.n	8000584 <LoopCopyDataInit>

0800057c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800057e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000580:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000582:	3104      	adds	r1, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000588:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800058a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800058c:	d3f6      	bcc.n	800057c <CopyDataInit>
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000590:	e002      	b.n	8000598 <LoopFillZerobss>

08000592 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000594:	f842 3b04 	str.w	r3, [r2], #4

08000598 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800059a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800059c:	d3f9      	bcc.n	8000592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800059e:	f7ff ffe5 	bl	800056c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a2:	f001 f895 	bl	80016d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fe21 	bl	80001ec <main>
  bx lr
 80005aa:	4770      	bx	lr
  ldr r3, =_sidata
 80005ac:	080026a4 	.word	0x080026a4
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005b4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80005b8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80005bc:	20000194 	.word	0x20000194

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_Init+0x28>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f907 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff fee8 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f911 	bl	8000836 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f8e7 	bl	80007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x1c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x20>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x20>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	20000008 	.word	0x20000008
 8000670:	2000018c 	.word	0x2000018c

08000674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <HAL_GetTick+0x10>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	2000018c 	.word	0x2000018c

08000688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4908      	ldr	r1, [pc, #32]	; (800073c <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000740:	b480      	push	{r7}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f1c3 0307 	rsb	r3, r3, #7
 800075a:	2b04      	cmp	r3, #4
 800075c:	bf28      	it	cs
 800075e:	2304      	movcs	r3, #4
 8000760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3304      	adds	r3, #4
 8000766:	2b06      	cmp	r3, #6
 8000768:	d902      	bls.n	8000770 <NVIC_EncodePriority+0x30>
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3b03      	subs	r3, #3
 800076e:	e000      	b.n	8000772 <NVIC_EncodePriority+0x32>
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	f04f 32ff 	mov.w	r2, #4294967295
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	43da      	mvns	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	401a      	ands	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000788:	f04f 31ff 	mov.w	r1, #4294967295
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	43d9      	mvns	r1, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f7ff ff90 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff49 	bl	8000688 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff5e 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff90 	bl	8000740 <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5f 	bl	80006ec <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffb0 	bl	80007a4 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b08b      	sub	sp, #44	; 0x2c
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000862:	e127      	b.n	8000ab4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000864:	2201      	movs	r2, #1
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	429a      	cmp	r2, r3
 800087e:	f040 8116 	bne.w	8000aae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b12      	cmp	r3, #18
 8000888:	d034      	beq.n	80008f4 <HAL_GPIO_Init+0xa4>
 800088a:	2b12      	cmp	r3, #18
 800088c:	d80d      	bhi.n	80008aa <HAL_GPIO_Init+0x5a>
 800088e:	2b02      	cmp	r3, #2
 8000890:	d02b      	beq.n	80008ea <HAL_GPIO_Init+0x9a>
 8000892:	2b02      	cmp	r3, #2
 8000894:	d804      	bhi.n	80008a0 <HAL_GPIO_Init+0x50>
 8000896:	2b00      	cmp	r3, #0
 8000898:	d031      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 800089a:	2b01      	cmp	r3, #1
 800089c:	d01c      	beq.n	80008d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800089e:	e048      	b.n	8000932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d043      	beq.n	800092c <HAL_GPIO_Init+0xdc>
 80008a4:	2b11      	cmp	r3, #17
 80008a6:	d01b      	beq.n	80008e0 <HAL_GPIO_Init+0x90>
          break;
 80008a8:	e043      	b.n	8000932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008aa:	4a89      	ldr	r2, [pc, #548]	; (8000ad0 <HAL_GPIO_Init+0x280>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d026      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008b0:	4a87      	ldr	r2, [pc, #540]	; (8000ad0 <HAL_GPIO_Init+0x280>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d806      	bhi.n	80008c4 <HAL_GPIO_Init+0x74>
 80008b6:	4a87      	ldr	r2, [pc, #540]	; (8000ad4 <HAL_GPIO_Init+0x284>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d020      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008bc:	4a86      	ldr	r2, [pc, #536]	; (8000ad8 <HAL_GPIO_Init+0x288>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d01d      	beq.n	80008fe <HAL_GPIO_Init+0xae>
          break;
 80008c2:	e036      	b.n	8000932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008c4:	4a85      	ldr	r2, [pc, #532]	; (8000adc <HAL_GPIO_Init+0x28c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d019      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008ca:	4a85      	ldr	r2, [pc, #532]	; (8000ae0 <HAL_GPIO_Init+0x290>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d016      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008d0:	4a84      	ldr	r2, [pc, #528]	; (8000ae4 <HAL_GPIO_Init+0x294>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d013      	beq.n	80008fe <HAL_GPIO_Init+0xae>
          break;
 80008d6:	e02c      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e028      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	3304      	adds	r3, #4
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	e023      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	3308      	adds	r3, #8
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e01e      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	330c      	adds	r3, #12
 80008fa:	623b      	str	r3, [r7, #32]
          break;
 80008fc:	e019      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000906:	2304      	movs	r3, #4
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e012      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d105      	bne.n	8000920 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	611a      	str	r2, [r3, #16]
          break;
 800091e:	e008      	b.n	8000932 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	615a      	str	r2, [r3, #20]
          break;
 800092a:	e002      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d801      	bhi.n	800093c <HAL_GPIO_Init+0xec>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	e001      	b.n	8000940 <HAL_GPIO_Init+0xf0>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3304      	adds	r3, #4
 8000940:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	2bff      	cmp	r3, #255	; 0xff
 8000946:	d802      	bhi.n	800094e <HAL_GPIO_Init+0xfe>
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	e002      	b.n	8000954 <HAL_GPIO_Init+0x104>
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	3b08      	subs	r3, #8
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	210f      	movs	r1, #15
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	6a39      	ldr	r1, [r7, #32]
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	431a      	orrs	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 8096 	beq.w	8000aae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <HAL_GPIO_Init+0x298>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a58      	ldr	r2, [pc, #352]	; (8000ae8 <HAL_GPIO_Init+0x298>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b56      	ldr	r3, [pc, #344]	; (8000ae8 <HAL_GPIO_Init+0x298>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800099a:	4a54      	ldr	r2, [pc, #336]	; (8000aec <HAL_GPIO_Init+0x29c>)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	220f      	movs	r2, #15
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <HAL_GPIO_Init+0x2a0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0x19e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <HAL_GPIO_Init+0x2a4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d00d      	beq.n	80009ea <HAL_GPIO_Init+0x19a>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <HAL_GPIO_Init+0x2a8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d007      	beq.n	80009e6 <HAL_GPIO_Init+0x196>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a48      	ldr	r2, [pc, #288]	; (8000afc <HAL_GPIO_Init+0x2ac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_GPIO_Init+0x192>
 80009de:	2303      	movs	r3, #3
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009e2:	2304      	movs	r3, #4
 80009e4:	e004      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009e6:	2302      	movs	r3, #2
 80009e8:	e002      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009ee:	2300      	movs	r3, #0
 80009f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f2:	f002 0203 	and.w	r2, r2, #3
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4093      	lsls	r3, r2
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a00:	493a      	ldr	r1, [pc, #232]	; (8000aec <HAL_GPIO_Init+0x29c>)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d006      	beq.n	8000a28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4938      	ldr	r1, [pc, #224]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	600b      	str	r3, [r1, #0]
 8000a26:	e006      	b.n	8000a36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	4933      	ldr	r1, [pc, #204]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	492e      	ldr	r1, [pc, #184]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	604b      	str	r3, [r1, #4]
 8000a4e:	e006      	b.n	8000a5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4929      	ldr	r1, [pc, #164]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d006      	beq.n	8000a78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	4924      	ldr	r1, [pc, #144]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	608b      	str	r3, [r1, #8]
 8000a76:	e006      	b.n	8000a86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	491f      	ldr	r1, [pc, #124]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	491a      	ldr	r1, [pc, #104]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	60cb      	str	r3, [r1, #12]
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f47f aed0 	bne.w	8000864 <HAL_GPIO_Init+0x14>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	372c      	adds	r7, #44	; 0x2c
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	10210000 	.word	0x10210000
 8000ad4:	10110000 	.word	0x10110000
 8000ad8:	10120000 	.word	0x10120000
 8000adc:	10310000 	.word	0x10310000
 8000ae0:	10320000 	.word	0x10320000
 8000ae4:	10220000 	.word	0x10220000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40011400 	.word	0x40011400
 8000b00:	40010400 	.word	0x40010400

08000b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e26c      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8087 	beq.w	8000c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b24:	4b92      	ldr	r3, [pc, #584]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 030c 	and.w	r3, r3, #12
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d00c      	beq.n	8000b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b30:	4b8f      	ldr	r3, [pc, #572]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d112      	bne.n	8000b62 <HAL_RCC_OscConfig+0x5e>
 8000b3c:	4b8c      	ldr	r3, [pc, #560]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b48:	d10b      	bne.n	8000b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4a:	4b89      	ldr	r3, [pc, #548]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d06c      	beq.n	8000c30 <HAL_RCC_OscConfig+0x12c>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d168      	bne.n	8000c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e246      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b6a:	d106      	bne.n	8000b7a <HAL_RCC_OscConfig+0x76>
 8000b6c:	4b80      	ldr	r3, [pc, #512]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a7f      	ldr	r2, [pc, #508]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e02e      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x98>
 8000b82:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a7a      	ldr	r2, [pc, #488]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b78      	ldr	r3, [pc, #480]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a77      	ldr	r2, [pc, #476]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e01d      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0xbc>
 8000ba6:	4b72      	ldr	r3, [pc, #456]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a71      	ldr	r2, [pc, #452]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4b6f      	ldr	r3, [pc, #444]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a6e      	ldr	r2, [pc, #440]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000bc0:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a6a      	ldr	r2, [pc, #424]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a67      	ldr	r2, [pc, #412]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d013      	beq.n	8000c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fd48 	bl	8000674 <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be8:	f7ff fd44 	bl	8000674 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b64      	cmp	r3, #100	; 0x64
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e1fa      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfa:	4b5d      	ldr	r3, [pc, #372]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f0      	beq.n	8000be8 <HAL_RCC_OscConfig+0xe4>
 8000c06:	e014      	b.n	8000c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fd34 	bl	8000674 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fd30 	bl	8000674 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e1e6      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c22:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f0      	bne.n	8000c10 <HAL_RCC_OscConfig+0x10c>
 8000c2e:	e000      	b.n	8000c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d063      	beq.n	8000d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c3e:	4b4c      	ldr	r3, [pc, #304]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c4a:	4b49      	ldr	r3, [pc, #292]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d11c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x18c>
 8000c56:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d116      	bne.n	8000c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c62:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_RCC_OscConfig+0x176>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e1ba      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4939      	ldr	r1, [pc, #228]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8e:	e03a      	b.n	8000d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d020      	beq.n	8000cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c98:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <HAL_RCC_OscConfig+0x270>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9e:	f7ff fce9 	bl	8000674 <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca6:	f7ff fce5 	bl	8000674 <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e19b      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4927      	ldr	r1, [pc, #156]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
 8000cd8:	e015      	b.n	8000d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fcc8 	bl	8000674 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fcc4 	bl	8000674 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e17a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d03a      	beq.n	8000d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d019      	beq.n	8000d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d20:	f7ff fca8 	bl	8000674 <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d28:	f7ff fca4 	bl	8000674 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e15a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f0      	beq.n	8000d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 fada 	bl	8001300 <RCC_Delay>
 8000d4c:	e01c      	b.n	8000d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d54:	f7ff fc8e 	bl	8000674 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5a:	e00f      	b.n	8000d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc8a 	bl	8000674 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d908      	bls.n	8000d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e140      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	42420000 	.word	0x42420000
 8000d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d7c:	4b9e      	ldr	r3, [pc, #632]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e9      	bne.n	8000d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80a6 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d9a:	4b97      	ldr	r3, [pc, #604]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10d      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b94      	ldr	r3, [pc, #592]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a93      	ldr	r2, [pc, #588]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b91      	ldr	r3, [pc, #580]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc2:	4b8e      	ldr	r3, [pc, #568]	; (8000ffc <HAL_RCC_OscConfig+0x4f8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d118      	bne.n	8000e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dce:	4b8b      	ldr	r3, [pc, #556]	; (8000ffc <HAL_RCC_OscConfig+0x4f8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a8a      	ldr	r2, [pc, #552]	; (8000ffc <HAL_RCC_OscConfig+0x4f8>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fc4b 	bl	8000674 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de2:	f7ff fc47 	bl	8000674 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b64      	cmp	r3, #100	; 0x64
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e0fd      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	4b81      	ldr	r3, [pc, #516]	; (8000ffc <HAL_RCC_OscConfig+0x4f8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d106      	bne.n	8000e16 <HAL_RCC_OscConfig+0x312>
 8000e08:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a7a      	ldr	r2, [pc, #488]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6213      	str	r3, [r2, #32]
 8000e14:	e02d      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x334>
 8000e1e:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a75      	ldr	r2, [pc, #468]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	6213      	str	r3, [r2, #32]
 8000e2a:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a72      	ldr	r2, [pc, #456]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	f023 0304 	bic.w	r3, r3, #4
 8000e34:	6213      	str	r3, [r2, #32]
 8000e36:	e01c      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d10c      	bne.n	8000e5a <HAL_RCC_OscConfig+0x356>
 8000e40:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4a6c      	ldr	r2, [pc, #432]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6213      	str	r3, [r2, #32]
 8000e4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	4a69      	ldr	r2, [pc, #420]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6213      	str	r3, [r2, #32]
 8000e58:	e00b      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e5a:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	4a66      	ldr	r2, [pc, #408]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	6213      	str	r3, [r2, #32]
 8000e66:	4b64      	ldr	r3, [pc, #400]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4a63      	ldr	r2, [pc, #396]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d015      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fbfb 	bl	8000674 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fbf7 	bl	8000674 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e0ab      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e98:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ee      	beq.n	8000e82 <HAL_RCC_OscConfig+0x37e>
 8000ea4:	e014      	b.n	8000ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fbe5 	bl	8000674 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fbe1 	bl	8000674 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e095      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1ee      	bne.n	8000eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d105      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed6:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a47      	ldr	r2, [pc, #284]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8081 	beq.w	8000fee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d061      	beq.n	8000fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d146      	bne.n	8000f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f00:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <HAL_RCC_OscConfig+0x4fc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fbb5 	bl	8000674 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fbb1 	bl	8000674 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e067      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	d108      	bne.n	8000f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	492d      	ldr	r1, [pc, #180]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a19      	ldr	r1, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	4927      	ldr	r1, [pc, #156]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_RCC_OscConfig+0x4fc>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fb85 	bl	8000674 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6e:	f7ff fb81 	bl	8000674 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e037      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x46a>
 8000f8c:	e02f      	b.n	8000fee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_RCC_OscConfig+0x4fc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fb6e 	bl	8000674 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff fb6a 	bl	8000674 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e020      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x498>
 8000fba:	e018      	b.n	8000fee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e013      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d106      	bne.n	8000fea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40007000 	.word	0x40007000
 8001000:	42420060 	.word	0x42420060

08001004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0d0      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001018:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d910      	bls.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 0207 	bic.w	r2, r3, #7
 800102e:	4965      	ldr	r1, [pc, #404]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d001      	beq.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0b8      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001060:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a58      	ldr	r2, [pc, #352]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800106a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001078:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001084:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	494d      	ldr	r1, [pc, #308]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d040      	beq.n	8001124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d115      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e07f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e073      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e06b      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f023 0203 	bic.w	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4936      	ldr	r1, [pc, #216]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f4:	f7ff fabe 	bl	8000674 <HAL_GetTick>
 80010f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff faba 	bl	8000674 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f241 3288 	movw	r2, #5000	; 0x1388
 800110a:	4293      	cmp	r3, r2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e053      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 020c 	and.w	r2, r3, #12
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	429a      	cmp	r2, r3
 8001122:	d1eb      	bne.n	80010fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d210      	bcs.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 0207 	bic.w	r2, r3, #7
 800113a:	4922      	ldr	r1, [pc, #136]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e032      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4916      	ldr	r1, [pc, #88]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	490e      	ldr	r1, [pc, #56]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001192:	f000 f821 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 8001196:	4601      	mov	r1, r0
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	fa21 f303 	lsr.w	r3, r1, r3
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_RCC_ClockConfig+0x1cc>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_RCC_ClockConfig+0x1d0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fa1c 	bl	80005f0 <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	08002604 	.word	0x08002604
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	b490      	push	{r4, r7}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011e0:	1d3c      	adds	r4, r7, #4
 80011e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <HAL_RCC_GetSysClockFreq+0xb4>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b04      	cmp	r3, #4
 8001210:	d002      	beq.n	8001218 <HAL_RCC_GetSysClockFreq+0x40>
 8001212:	2b08      	cmp	r3, #8
 8001214:	d003      	beq.n	800121e <HAL_RCC_GetSysClockFreq+0x46>
 8001216:	e02d      	b.n	8001274 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_RCC_GetSysClockFreq+0xbc>)
 800121a:	623b      	str	r3, [r7, #32]
      break;
 800121c:	e02d      	b.n	800127a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800122a:	4413      	add	r3, r2
 800122c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001230:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	0c5b      	lsrs	r3, r3, #17
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800124a:	4413      	add	r3, r2
 800124c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001256:	fb02 f203 	mul.w	r2, r2, r3
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
 8001262:	e004      	b.n	800126e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	623b      	str	r3, [r7, #32]
      break;
 8001272:	e002      	b.n	800127a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001276:	623b      	str	r3, [r7, #32]
      break;
 8001278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800127a:	6a3b      	ldr	r3, [r7, #32]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bc90      	pop	{r4, r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	080025f0 	.word	0x080025f0
 800128c:	08002600 	.word	0x08002600
 8001290:	40021000 	.word	0x40021000
 8001294:	007a1200 	.word	0x007a1200
 8001298:	003d0900 	.word	0x003d0900

0800129c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <HAL_RCC_GetHCLKFreq+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000000 	.word	0x20000000

080012b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012b4:	f7ff fff2 	bl	800129c <HAL_RCC_GetHCLKFreq>
 80012b8:	4601      	mov	r1, r0
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000
 80012d4:	08002614 	.word	0x08002614

080012d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012dc:	f7ff ffde 	bl	800129c <HAL_RCC_GetHCLKFreq>
 80012e0:	4601      	mov	r1, r0
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	0adb      	lsrs	r3, r3, #11
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	08002614 	.word	0x08002614

08001300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <RCC_Delay+0x34>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <RCC_Delay+0x38>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	0a5b      	lsrs	r3, r3, #9
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800131c:	bf00      	nop
  }
  while (Delay --);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	60fa      	str	r2, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f9      	bne.n	800131c <RCC_Delay+0x1c>
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000
 8001338:	10624dd3 	.word	0x10624dd3

0800133c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e03f      	b.n	80013ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f858 	bl	8000418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800137e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f911 	bl	80015a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2220      	movs	r2, #32
 80013c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b08a      	sub	sp, #40	; 0x28
 80013da:	af02      	add	r7, sp, #8
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	f040 8089 	bne.w	800150a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_UART_Receive+0x2e>
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e081      	b.n	800150c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_UART_Receive+0x40>
 8001412:	2302      	movs	r3, #2
 8001414:	e07a      	b.n	800150c <HAL_UART_Receive+0x136>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2222      	movs	r2, #34	; 0x22
 8001428:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800142c:	f7ff f922 	bl	8000674 <HAL_GetTick>
 8001430:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001446:	d108      	bne.n	800145a <HAL_UART_Receive+0x84>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	e003      	b.n	8001462 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800146a:	e043      	b.n	80014f4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2200      	movs	r2, #0
 8001474:	2120      	movs	r1, #32
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f84c 	bl	8001514 <UART_WaitOnFlagUntilTimeout>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e042      	b.n	800150c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10c      	bne.n	80014a6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	b29b      	uxth	r3, r3
 8001494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001498:	b29a      	uxth	r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	3302      	adds	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	e01f      	b.n	80014e6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ae:	d007      	beq.n	80014c0 <HAL_UART_Receive+0xea>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10a      	bne.n	80014ce <HAL_UART_Receive+0xf8>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e008      	b.n	80014e0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	3301      	adds	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1b6      	bne.n	800146c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800150a:	2302      	movs	r3, #2
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	4613      	mov	r3, r2
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001524:	e02c      	b.n	8001580 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d028      	beq.n	8001580 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <UART_WaitOnFlagUntilTimeout+0x30>
 8001534:	f7ff f89e 	bl	8000674 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	429a      	cmp	r2, r3
 8001542:	d21d      	bcs.n	8001580 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001552:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2220      	movs	r2, #32
 8001568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e00f      	b.n	80015a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4013      	ands	r3, r2
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	429a      	cmp	r2, r3
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	429a      	cmp	r2, r3
 800159c:	d0c3      	beq.n	8001526 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015e2:	f023 030c 	bic.w	r3, r3, #12
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2c      	ldr	r2, [pc, #176]	; (80016bc <UART_SetConfig+0x114>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d103      	bne.n	8001618 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001610:	f7ff fe62 	bl	80012d8 <HAL_RCC_GetPCLK2Freq>
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	e002      	b.n	800161e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001618:	f7ff fe4a 	bl	80012b0 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	009a      	lsls	r2, r3, #2
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <UART_SetConfig+0x118>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	0119      	lsls	r1, r3, #4
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009a      	lsls	r2, r3, #2
 8001648:	441a      	add	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fbb2 f2f3 	udiv	r2, r2, r3
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <UART_SetConfig+0x118>)
 8001656:	fba3 0302 	umull	r0, r3, r3, r2
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2064      	movs	r0, #100	; 0x64
 800165e:	fb00 f303 	mul.w	r3, r0, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	3332      	adds	r3, #50	; 0x32
 8001668:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <UART_SetConfig+0x118>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001674:	4419      	add	r1, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009a      	lsls	r2, r3, #2
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fbb2 f2f3 	udiv	r2, r2, r3
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <UART_SetConfig+0x118>)
 800168e:	fba3 0302 	umull	r0, r3, r3, r2
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	fb00 f303 	mul.w	r3, r0, r3
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	3332      	adds	r3, #50	; 0x32
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <UART_SetConfig+0x118>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	f003 020f 	and.w	r2, r3, #15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	440a      	add	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	51eb851f 	.word	0x51eb851f

080016c4 <__errno>:
 80016c4:	4b01      	ldr	r3, [pc, #4]	; (80016cc <__errno+0x8>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <__libc_init_array>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	2500      	movs	r5, #0
 80016d4:	4e0c      	ldr	r6, [pc, #48]	; (8001708 <__libc_init_array+0x38>)
 80016d6:	4c0d      	ldr	r4, [pc, #52]	; (800170c <__libc_init_array+0x3c>)
 80016d8:	1ba4      	subs	r4, r4, r6
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	42a5      	cmp	r5, r4
 80016de:	d109      	bne.n	80016f4 <__libc_init_array+0x24>
 80016e0:	f000 ff40 	bl	8002564 <_init>
 80016e4:	2500      	movs	r5, #0
 80016e6:	4e0a      	ldr	r6, [pc, #40]	; (8001710 <__libc_init_array+0x40>)
 80016e8:	4c0a      	ldr	r4, [pc, #40]	; (8001714 <__libc_init_array+0x44>)
 80016ea:	1ba4      	subs	r4, r4, r6
 80016ec:	10a4      	asrs	r4, r4, #2
 80016ee:	42a5      	cmp	r5, r4
 80016f0:	d105      	bne.n	80016fe <__libc_init_array+0x2e>
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f8:	4798      	blx	r3
 80016fa:	3501      	adds	r5, #1
 80016fc:	e7ee      	b.n	80016dc <__libc_init_array+0xc>
 80016fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001702:	4798      	blx	r3
 8001704:	3501      	adds	r5, #1
 8001706:	e7f2      	b.n	80016ee <__libc_init_array+0x1e>
 8001708:	0800269c 	.word	0x0800269c
 800170c:	0800269c 	.word	0x0800269c
 8001710:	0800269c 	.word	0x0800269c
 8001714:	080026a0 	.word	0x080026a0

08001718 <memset>:
 8001718:	4603      	mov	r3, r0
 800171a:	4402      	add	r2, r0
 800171c:	4293      	cmp	r3, r2
 800171e:	d100      	bne.n	8001722 <memset+0xa>
 8001720:	4770      	bx	lr
 8001722:	f803 1b01 	strb.w	r1, [r3], #1
 8001726:	e7f9      	b.n	800171c <memset+0x4>

08001728 <_puts_r>:
 8001728:	b570      	push	{r4, r5, r6, lr}
 800172a:	460e      	mov	r6, r1
 800172c:	4605      	mov	r5, r0
 800172e:	b118      	cbz	r0, 8001738 <_puts_r+0x10>
 8001730:	6983      	ldr	r3, [r0, #24]
 8001732:	b90b      	cbnz	r3, 8001738 <_puts_r+0x10>
 8001734:	f000 fa1e 	bl	8001b74 <__sinit>
 8001738:	69ab      	ldr	r3, [r5, #24]
 800173a:	68ac      	ldr	r4, [r5, #8]
 800173c:	b913      	cbnz	r3, 8001744 <_puts_r+0x1c>
 800173e:	4628      	mov	r0, r5
 8001740:	f000 fa18 	bl	8001b74 <__sinit>
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <_puts_r+0xac>)
 8001746:	429c      	cmp	r4, r3
 8001748:	d117      	bne.n	800177a <_puts_r+0x52>
 800174a:	686c      	ldr	r4, [r5, #4]
 800174c:	89a3      	ldrh	r3, [r4, #12]
 800174e:	071b      	lsls	r3, r3, #28
 8001750:	d51d      	bpl.n	800178e <_puts_r+0x66>
 8001752:	6923      	ldr	r3, [r4, #16]
 8001754:	b1db      	cbz	r3, 800178e <_puts_r+0x66>
 8001756:	3e01      	subs	r6, #1
 8001758:	68a3      	ldr	r3, [r4, #8]
 800175a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800175e:	3b01      	subs	r3, #1
 8001760:	60a3      	str	r3, [r4, #8]
 8001762:	b9e9      	cbnz	r1, 80017a0 <_puts_r+0x78>
 8001764:	2b00      	cmp	r3, #0
 8001766:	da2e      	bge.n	80017c6 <_puts_r+0x9e>
 8001768:	4622      	mov	r2, r4
 800176a:	210a      	movs	r1, #10
 800176c:	4628      	mov	r0, r5
 800176e:	f000 f851 	bl	8001814 <__swbuf_r>
 8001772:	3001      	adds	r0, #1
 8001774:	d011      	beq.n	800179a <_puts_r+0x72>
 8001776:	200a      	movs	r0, #10
 8001778:	e011      	b.n	800179e <_puts_r+0x76>
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <_puts_r+0xb0>)
 800177c:	429c      	cmp	r4, r3
 800177e:	d101      	bne.n	8001784 <_puts_r+0x5c>
 8001780:	68ac      	ldr	r4, [r5, #8]
 8001782:	e7e3      	b.n	800174c <_puts_r+0x24>
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_puts_r+0xb4>)
 8001786:	429c      	cmp	r4, r3
 8001788:	bf08      	it	eq
 800178a:	68ec      	ldreq	r4, [r5, #12]
 800178c:	e7de      	b.n	800174c <_puts_r+0x24>
 800178e:	4621      	mov	r1, r4
 8001790:	4628      	mov	r0, r5
 8001792:	f000 f891 	bl	80018b8 <__swsetup_r>
 8001796:	2800      	cmp	r0, #0
 8001798:	d0dd      	beq.n	8001756 <_puts_r+0x2e>
 800179a:	f04f 30ff 	mov.w	r0, #4294967295
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da04      	bge.n	80017ae <_puts_r+0x86>
 80017a4:	69a2      	ldr	r2, [r4, #24]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dc06      	bgt.n	80017b8 <_puts_r+0x90>
 80017aa:	290a      	cmp	r1, #10
 80017ac:	d004      	beq.n	80017b8 <_puts_r+0x90>
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	6022      	str	r2, [r4, #0]
 80017b4:	7019      	strb	r1, [r3, #0]
 80017b6:	e7cf      	b.n	8001758 <_puts_r+0x30>
 80017b8:	4622      	mov	r2, r4
 80017ba:	4628      	mov	r0, r5
 80017bc:	f000 f82a 	bl	8001814 <__swbuf_r>
 80017c0:	3001      	adds	r0, #1
 80017c2:	d1c9      	bne.n	8001758 <_puts_r+0x30>
 80017c4:	e7e9      	b.n	800179a <_puts_r+0x72>
 80017c6:	200a      	movs	r0, #10
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	6022      	str	r2, [r4, #0]
 80017ce:	7018      	strb	r0, [r3, #0]
 80017d0:	e7e5      	b.n	800179e <_puts_r+0x76>
 80017d2:	bf00      	nop
 80017d4:	08002640 	.word	0x08002640
 80017d8:	08002660 	.word	0x08002660
 80017dc:	08002620 	.word	0x08002620

080017e0 <puts>:
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <puts+0xc>)
 80017e2:	4601      	mov	r1, r0
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	f7ff bf9f 	b.w	8001728 <_puts_r>
 80017ea:	bf00      	nop
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <strncmp>:
 80017f0:	b510      	push	{r4, lr}
 80017f2:	b16a      	cbz	r2, 8001810 <strncmp+0x20>
 80017f4:	3901      	subs	r1, #1
 80017f6:	1884      	adds	r4, r0, r2
 80017f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80017fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001800:	4293      	cmp	r3, r2
 8001802:	d103      	bne.n	800180c <strncmp+0x1c>
 8001804:	42a0      	cmp	r0, r4
 8001806:	d001      	beq.n	800180c <strncmp+0x1c>
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f5      	bne.n	80017f8 <strncmp+0x8>
 800180c:	1a98      	subs	r0, r3, r2
 800180e:	bd10      	pop	{r4, pc}
 8001810:	4610      	mov	r0, r2
 8001812:	e7fc      	b.n	800180e <strncmp+0x1e>

08001814 <__swbuf_r>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	460e      	mov	r6, r1
 8001818:	4614      	mov	r4, r2
 800181a:	4605      	mov	r5, r0
 800181c:	b118      	cbz	r0, 8001826 <__swbuf_r+0x12>
 800181e:	6983      	ldr	r3, [r0, #24]
 8001820:	b90b      	cbnz	r3, 8001826 <__swbuf_r+0x12>
 8001822:	f000 f9a7 	bl	8001b74 <__sinit>
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <__swbuf_r+0x98>)
 8001828:	429c      	cmp	r4, r3
 800182a:	d12a      	bne.n	8001882 <__swbuf_r+0x6e>
 800182c:	686c      	ldr	r4, [r5, #4]
 800182e:	69a3      	ldr	r3, [r4, #24]
 8001830:	60a3      	str	r3, [r4, #8]
 8001832:	89a3      	ldrh	r3, [r4, #12]
 8001834:	071a      	lsls	r2, r3, #28
 8001836:	d52e      	bpl.n	8001896 <__swbuf_r+0x82>
 8001838:	6923      	ldr	r3, [r4, #16]
 800183a:	b363      	cbz	r3, 8001896 <__swbuf_r+0x82>
 800183c:	6923      	ldr	r3, [r4, #16]
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	b2f6      	uxtb	r6, r6
 8001842:	1ac0      	subs	r0, r0, r3
 8001844:	6963      	ldr	r3, [r4, #20]
 8001846:	4637      	mov	r7, r6
 8001848:	4283      	cmp	r3, r0
 800184a:	dc04      	bgt.n	8001856 <__swbuf_r+0x42>
 800184c:	4621      	mov	r1, r4
 800184e:	4628      	mov	r0, r5
 8001850:	f000 f926 	bl	8001aa0 <_fflush_r>
 8001854:	bb28      	cbnz	r0, 80018a2 <__swbuf_r+0x8e>
 8001856:	68a3      	ldr	r3, [r4, #8]
 8001858:	3001      	adds	r0, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	60a3      	str	r3, [r4, #8]
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	6022      	str	r2, [r4, #0]
 8001864:	701e      	strb	r6, [r3, #0]
 8001866:	6963      	ldr	r3, [r4, #20]
 8001868:	4283      	cmp	r3, r0
 800186a:	d004      	beq.n	8001876 <__swbuf_r+0x62>
 800186c:	89a3      	ldrh	r3, [r4, #12]
 800186e:	07db      	lsls	r3, r3, #31
 8001870:	d519      	bpl.n	80018a6 <__swbuf_r+0x92>
 8001872:	2e0a      	cmp	r6, #10
 8001874:	d117      	bne.n	80018a6 <__swbuf_r+0x92>
 8001876:	4621      	mov	r1, r4
 8001878:	4628      	mov	r0, r5
 800187a:	f000 f911 	bl	8001aa0 <_fflush_r>
 800187e:	b190      	cbz	r0, 80018a6 <__swbuf_r+0x92>
 8001880:	e00f      	b.n	80018a2 <__swbuf_r+0x8e>
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <__swbuf_r+0x9c>)
 8001884:	429c      	cmp	r4, r3
 8001886:	d101      	bne.n	800188c <__swbuf_r+0x78>
 8001888:	68ac      	ldr	r4, [r5, #8]
 800188a:	e7d0      	b.n	800182e <__swbuf_r+0x1a>
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <__swbuf_r+0xa0>)
 800188e:	429c      	cmp	r4, r3
 8001890:	bf08      	it	eq
 8001892:	68ec      	ldreq	r4, [r5, #12]
 8001894:	e7cb      	b.n	800182e <__swbuf_r+0x1a>
 8001896:	4621      	mov	r1, r4
 8001898:	4628      	mov	r0, r5
 800189a:	f000 f80d 	bl	80018b8 <__swsetup_r>
 800189e:	2800      	cmp	r0, #0
 80018a0:	d0cc      	beq.n	800183c <__swbuf_r+0x28>
 80018a2:	f04f 37ff 	mov.w	r7, #4294967295
 80018a6:	4638      	mov	r0, r7
 80018a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	08002640 	.word	0x08002640
 80018b0:	08002660 	.word	0x08002660
 80018b4:	08002620 	.word	0x08002620

080018b8 <__swsetup_r>:
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <__swsetup_r+0xcc>)
 80018ba:	b570      	push	{r4, r5, r6, lr}
 80018bc:	681d      	ldr	r5, [r3, #0]
 80018be:	4606      	mov	r6, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	b125      	cbz	r5, 80018ce <__swsetup_r+0x16>
 80018c4:	69ab      	ldr	r3, [r5, #24]
 80018c6:	b913      	cbnz	r3, 80018ce <__swsetup_r+0x16>
 80018c8:	4628      	mov	r0, r5
 80018ca:	f000 f953 	bl	8001b74 <__sinit>
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <__swsetup_r+0xd0>)
 80018d0:	429c      	cmp	r4, r3
 80018d2:	d10f      	bne.n	80018f4 <__swsetup_r+0x3c>
 80018d4:	686c      	ldr	r4, [r5, #4]
 80018d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	0715      	lsls	r5, r2, #28
 80018de:	d42c      	bmi.n	800193a <__swsetup_r+0x82>
 80018e0:	06d0      	lsls	r0, r2, #27
 80018e2:	d411      	bmi.n	8001908 <__swsetup_r+0x50>
 80018e4:	2209      	movs	r2, #9
 80018e6:	6032      	str	r2, [r6, #0]
 80018e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ec:	81a3      	strh	r3, [r4, #12]
 80018ee:	f04f 30ff 	mov.w	r0, #4294967295
 80018f2:	e03e      	b.n	8001972 <__swsetup_r+0xba>
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <__swsetup_r+0xd4>)
 80018f6:	429c      	cmp	r4, r3
 80018f8:	d101      	bne.n	80018fe <__swsetup_r+0x46>
 80018fa:	68ac      	ldr	r4, [r5, #8]
 80018fc:	e7eb      	b.n	80018d6 <__swsetup_r+0x1e>
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <__swsetup_r+0xd8>)
 8001900:	429c      	cmp	r4, r3
 8001902:	bf08      	it	eq
 8001904:	68ec      	ldreq	r4, [r5, #12]
 8001906:	e7e6      	b.n	80018d6 <__swsetup_r+0x1e>
 8001908:	0751      	lsls	r1, r2, #29
 800190a:	d512      	bpl.n	8001932 <__swsetup_r+0x7a>
 800190c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800190e:	b141      	cbz	r1, 8001922 <__swsetup_r+0x6a>
 8001910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001914:	4299      	cmp	r1, r3
 8001916:	d002      	beq.n	800191e <__swsetup_r+0x66>
 8001918:	4630      	mov	r0, r6
 800191a:	f000 fa19 	bl	8001d50 <_free_r>
 800191e:	2300      	movs	r3, #0
 8001920:	6363      	str	r3, [r4, #52]	; 0x34
 8001922:	89a3      	ldrh	r3, [r4, #12]
 8001924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001928:	81a3      	strh	r3, [r4, #12]
 800192a:	2300      	movs	r3, #0
 800192c:	6063      	str	r3, [r4, #4]
 800192e:	6923      	ldr	r3, [r4, #16]
 8001930:	6023      	str	r3, [r4, #0]
 8001932:	89a3      	ldrh	r3, [r4, #12]
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	81a3      	strh	r3, [r4, #12]
 800193a:	6923      	ldr	r3, [r4, #16]
 800193c:	b94b      	cbnz	r3, 8001952 <__swsetup_r+0x9a>
 800193e:	89a3      	ldrh	r3, [r4, #12]
 8001940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001948:	d003      	beq.n	8001952 <__swsetup_r+0x9a>
 800194a:	4621      	mov	r1, r4
 800194c:	4630      	mov	r0, r6
 800194e:	f000 f9bf 	bl	8001cd0 <__smakebuf_r>
 8001952:	89a2      	ldrh	r2, [r4, #12]
 8001954:	f012 0301 	ands.w	r3, r2, #1
 8001958:	d00c      	beq.n	8001974 <__swsetup_r+0xbc>
 800195a:	2300      	movs	r3, #0
 800195c:	60a3      	str	r3, [r4, #8]
 800195e:	6963      	ldr	r3, [r4, #20]
 8001960:	425b      	negs	r3, r3
 8001962:	61a3      	str	r3, [r4, #24]
 8001964:	6923      	ldr	r3, [r4, #16]
 8001966:	b953      	cbnz	r3, 800197e <__swsetup_r+0xc6>
 8001968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800196c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001970:	d1ba      	bne.n	80018e8 <__swsetup_r+0x30>
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	0792      	lsls	r2, r2, #30
 8001976:	bf58      	it	pl
 8001978:	6963      	ldrpl	r3, [r4, #20]
 800197a:	60a3      	str	r3, [r4, #8]
 800197c:	e7f2      	b.n	8001964 <__swsetup_r+0xac>
 800197e:	2000      	movs	r0, #0
 8001980:	e7f7      	b.n	8001972 <__swsetup_r+0xba>
 8001982:	bf00      	nop
 8001984:	2000000c 	.word	0x2000000c
 8001988:	08002640 	.word	0x08002640
 800198c:	08002660 	.word	0x08002660
 8001990:	08002620 	.word	0x08002620

08001994 <__sflush_r>:
 8001994:	898a      	ldrh	r2, [r1, #12]
 8001996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800199a:	4605      	mov	r5, r0
 800199c:	0710      	lsls	r0, r2, #28
 800199e:	460c      	mov	r4, r1
 80019a0:	d458      	bmi.n	8001a54 <__sflush_r+0xc0>
 80019a2:	684b      	ldr	r3, [r1, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dc05      	bgt.n	80019b4 <__sflush_r+0x20>
 80019a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	dc02      	bgt.n	80019b4 <__sflush_r+0x20>
 80019ae:	2000      	movs	r0, #0
 80019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019b6:	2e00      	cmp	r6, #0
 80019b8:	d0f9      	beq.n	80019ae <__sflush_r+0x1a>
 80019ba:	2300      	movs	r3, #0
 80019bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019c0:	682f      	ldr	r7, [r5, #0]
 80019c2:	6a21      	ldr	r1, [r4, #32]
 80019c4:	602b      	str	r3, [r5, #0]
 80019c6:	d032      	beq.n	8001a2e <__sflush_r+0x9a>
 80019c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	075a      	lsls	r2, r3, #29
 80019ce:	d505      	bpl.n	80019dc <__sflush_r+0x48>
 80019d0:	6863      	ldr	r3, [r4, #4]
 80019d2:	1ac0      	subs	r0, r0, r3
 80019d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019d6:	b10b      	cbz	r3, 80019dc <__sflush_r+0x48>
 80019d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019da:	1ac0      	subs	r0, r0, r3
 80019dc:	2300      	movs	r3, #0
 80019de:	4602      	mov	r2, r0
 80019e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019e2:	6a21      	ldr	r1, [r4, #32]
 80019e4:	4628      	mov	r0, r5
 80019e6:	47b0      	blx	r6
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	89a3      	ldrh	r3, [r4, #12]
 80019ec:	d106      	bne.n	80019fc <__sflush_r+0x68>
 80019ee:	6829      	ldr	r1, [r5, #0]
 80019f0:	291d      	cmp	r1, #29
 80019f2:	d848      	bhi.n	8001a86 <__sflush_r+0xf2>
 80019f4:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <__sflush_r+0x108>)
 80019f6:	40ca      	lsrs	r2, r1
 80019f8:	07d6      	lsls	r6, r2, #31
 80019fa:	d544      	bpl.n	8001a86 <__sflush_r+0xf2>
 80019fc:	2200      	movs	r2, #0
 80019fe:	6062      	str	r2, [r4, #4]
 8001a00:	6922      	ldr	r2, [r4, #16]
 8001a02:	04d9      	lsls	r1, r3, #19
 8001a04:	6022      	str	r2, [r4, #0]
 8001a06:	d504      	bpl.n	8001a12 <__sflush_r+0x7e>
 8001a08:	1c42      	adds	r2, r0, #1
 8001a0a:	d101      	bne.n	8001a10 <__sflush_r+0x7c>
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	b903      	cbnz	r3, 8001a12 <__sflush_r+0x7e>
 8001a10:	6560      	str	r0, [r4, #84]	; 0x54
 8001a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a14:	602f      	str	r7, [r5, #0]
 8001a16:	2900      	cmp	r1, #0
 8001a18:	d0c9      	beq.n	80019ae <__sflush_r+0x1a>
 8001a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a1e:	4299      	cmp	r1, r3
 8001a20:	d002      	beq.n	8001a28 <__sflush_r+0x94>
 8001a22:	4628      	mov	r0, r5
 8001a24:	f000 f994 	bl	8001d50 <_free_r>
 8001a28:	2000      	movs	r0, #0
 8001a2a:	6360      	str	r0, [r4, #52]	; 0x34
 8001a2c:	e7c0      	b.n	80019b0 <__sflush_r+0x1c>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4628      	mov	r0, r5
 8001a32:	47b0      	blx	r6
 8001a34:	1c41      	adds	r1, r0, #1
 8001a36:	d1c8      	bne.n	80019ca <__sflush_r+0x36>
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0c5      	beq.n	80019ca <__sflush_r+0x36>
 8001a3e:	2b1d      	cmp	r3, #29
 8001a40:	d001      	beq.n	8001a46 <__sflush_r+0xb2>
 8001a42:	2b16      	cmp	r3, #22
 8001a44:	d101      	bne.n	8001a4a <__sflush_r+0xb6>
 8001a46:	602f      	str	r7, [r5, #0]
 8001a48:	e7b1      	b.n	80019ae <__sflush_r+0x1a>
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	81a3      	strh	r3, [r4, #12]
 8001a52:	e7ad      	b.n	80019b0 <__sflush_r+0x1c>
 8001a54:	690f      	ldr	r7, [r1, #16]
 8001a56:	2f00      	cmp	r7, #0
 8001a58:	d0a9      	beq.n	80019ae <__sflush_r+0x1a>
 8001a5a:	0793      	lsls	r3, r2, #30
 8001a5c:	bf18      	it	ne
 8001a5e:	2300      	movne	r3, #0
 8001a60:	680e      	ldr	r6, [r1, #0]
 8001a62:	bf08      	it	eq
 8001a64:	694b      	ldreq	r3, [r1, #20]
 8001a66:	eba6 0807 	sub.w	r8, r6, r7
 8001a6a:	600f      	str	r7, [r1, #0]
 8001a6c:	608b      	str	r3, [r1, #8]
 8001a6e:	f1b8 0f00 	cmp.w	r8, #0
 8001a72:	dd9c      	ble.n	80019ae <__sflush_r+0x1a>
 8001a74:	4643      	mov	r3, r8
 8001a76:	463a      	mov	r2, r7
 8001a78:	6a21      	ldr	r1, [r4, #32]
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a7e:	47b0      	blx	r6
 8001a80:	2800      	cmp	r0, #0
 8001a82:	dc06      	bgt.n	8001a92 <__sflush_r+0xfe>
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8a:	81a3      	strh	r3, [r4, #12]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	e78e      	b.n	80019b0 <__sflush_r+0x1c>
 8001a92:	4407      	add	r7, r0
 8001a94:	eba8 0800 	sub.w	r8, r8, r0
 8001a98:	e7e9      	b.n	8001a6e <__sflush_r+0xda>
 8001a9a:	bf00      	nop
 8001a9c:	20400001 	.word	0x20400001

08001aa0 <_fflush_r>:
 8001aa0:	b538      	push	{r3, r4, r5, lr}
 8001aa2:	690b      	ldr	r3, [r1, #16]
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	b1db      	cbz	r3, 8001ae2 <_fflush_r+0x42>
 8001aaa:	b118      	cbz	r0, 8001ab4 <_fflush_r+0x14>
 8001aac:	6983      	ldr	r3, [r0, #24]
 8001aae:	b90b      	cbnz	r3, 8001ab4 <_fflush_r+0x14>
 8001ab0:	f000 f860 	bl	8001b74 <__sinit>
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <_fflush_r+0x48>)
 8001ab6:	429c      	cmp	r4, r3
 8001ab8:	d109      	bne.n	8001ace <_fflush_r+0x2e>
 8001aba:	686c      	ldr	r4, [r5, #4]
 8001abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ac0:	b17b      	cbz	r3, 8001ae2 <_fflush_r+0x42>
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aca:	f7ff bf63 	b.w	8001994 <__sflush_r>
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_fflush_r+0x4c>)
 8001ad0:	429c      	cmp	r4, r3
 8001ad2:	d101      	bne.n	8001ad8 <_fflush_r+0x38>
 8001ad4:	68ac      	ldr	r4, [r5, #8]
 8001ad6:	e7f1      	b.n	8001abc <_fflush_r+0x1c>
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <_fflush_r+0x50>)
 8001ada:	429c      	cmp	r4, r3
 8001adc:	bf08      	it	eq
 8001ade:	68ec      	ldreq	r4, [r5, #12]
 8001ae0:	e7ec      	b.n	8001abc <_fflush_r+0x1c>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	bd38      	pop	{r3, r4, r5, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08002640 	.word	0x08002640
 8001aec:	08002660 	.word	0x08002660
 8001af0:	08002620 	.word	0x08002620

08001af4 <std>:
 8001af4:	2300      	movs	r3, #0
 8001af6:	b510      	push	{r4, lr}
 8001af8:	4604      	mov	r4, r0
 8001afa:	e9c0 3300 	strd	r3, r3, [r0]
 8001afe:	6083      	str	r3, [r0, #8]
 8001b00:	8181      	strh	r1, [r0, #12]
 8001b02:	6643      	str	r3, [r0, #100]	; 0x64
 8001b04:	81c2      	strh	r2, [r0, #14]
 8001b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b0a:	6183      	str	r3, [r0, #24]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	2208      	movs	r2, #8
 8001b10:	305c      	adds	r0, #92	; 0x5c
 8001b12:	f7ff fe01 	bl	8001718 <memset>
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <std+0x38>)
 8001b18:	6224      	str	r4, [r4, #32]
 8001b1a:	6263      	str	r3, [r4, #36]	; 0x24
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <std+0x3c>)
 8001b1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <std+0x40>)
 8001b22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <std+0x44>)
 8001b26:	6323      	str	r3, [r4, #48]	; 0x30
 8001b28:	bd10      	pop	{r4, pc}
 8001b2a:	bf00      	nop
 8001b2c:	08001ebd 	.word	0x08001ebd
 8001b30:	08001edf 	.word	0x08001edf
 8001b34:	08001f17 	.word	0x08001f17
 8001b38:	08001f3b 	.word	0x08001f3b

08001b3c <_cleanup_r>:
 8001b3c:	4901      	ldr	r1, [pc, #4]	; (8001b44 <_cleanup_r+0x8>)
 8001b3e:	f000 b885 	b.w	8001c4c <_fwalk_reent>
 8001b42:	bf00      	nop
 8001b44:	08001aa1 	.word	0x08001aa1

08001b48 <__sfmoreglue>:
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	2568      	movs	r5, #104	; 0x68
 8001b4c:	1e4a      	subs	r2, r1, #1
 8001b4e:	4355      	muls	r5, r2
 8001b50:	460e      	mov	r6, r1
 8001b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b56:	f000 f947 	bl	8001de8 <_malloc_r>
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	b140      	cbz	r0, 8001b70 <__sfmoreglue+0x28>
 8001b5e:	2100      	movs	r1, #0
 8001b60:	e9c0 1600 	strd	r1, r6, [r0]
 8001b64:	300c      	adds	r0, #12
 8001b66:	60a0      	str	r0, [r4, #8]
 8001b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b6c:	f7ff fdd4 	bl	8001718 <memset>
 8001b70:	4620      	mov	r0, r4
 8001b72:	bd70      	pop	{r4, r5, r6, pc}

08001b74 <__sinit>:
 8001b74:	6983      	ldr	r3, [r0, #24]
 8001b76:	b510      	push	{r4, lr}
 8001b78:	4604      	mov	r4, r0
 8001b7a:	bb33      	cbnz	r3, 8001bca <__sinit+0x56>
 8001b7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b80:	6503      	str	r3, [r0, #80]	; 0x50
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <__sinit+0x58>)
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <__sinit+0x5c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6282      	str	r2, [r0, #40]	; 0x28
 8001b8a:	4298      	cmp	r0, r3
 8001b8c:	bf04      	itt	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	6183      	streq	r3, [r0, #24]
 8001b92:	f000 f81f 	bl	8001bd4 <__sfp>
 8001b96:	6060      	str	r0, [r4, #4]
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f000 f81b 	bl	8001bd4 <__sfp>
 8001b9e:	60a0      	str	r0, [r4, #8]
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f000 f817 	bl	8001bd4 <__sfp>
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60e0      	str	r0, [r4, #12]
 8001baa:	2104      	movs	r1, #4
 8001bac:	6860      	ldr	r0, [r4, #4]
 8001bae:	f7ff ffa1 	bl	8001af4 <std>
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2109      	movs	r1, #9
 8001bb6:	68a0      	ldr	r0, [r4, #8]
 8001bb8:	f7ff ff9c 	bl	8001af4 <std>
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	2112      	movs	r1, #18
 8001bc0:	68e0      	ldr	r0, [r4, #12]
 8001bc2:	f7ff ff97 	bl	8001af4 <std>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61a3      	str	r3, [r4, #24]
 8001bca:	bd10      	pop	{r4, pc}
 8001bcc:	0800261c 	.word	0x0800261c
 8001bd0:	08001b3d 	.word	0x08001b3d

08001bd4 <__sfp>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <__sfp+0x70>)
 8001bd8:	4607      	mov	r7, r0
 8001bda:	681e      	ldr	r6, [r3, #0]
 8001bdc:	69b3      	ldr	r3, [r6, #24]
 8001bde:	b913      	cbnz	r3, 8001be6 <__sfp+0x12>
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff ffc7 	bl	8001b74 <__sinit>
 8001be6:	3648      	adds	r6, #72	; 0x48
 8001be8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	d503      	bpl.n	8001bf8 <__sfp+0x24>
 8001bf0:	6833      	ldr	r3, [r6, #0]
 8001bf2:	b133      	cbz	r3, 8001c02 <__sfp+0x2e>
 8001bf4:	6836      	ldr	r6, [r6, #0]
 8001bf6:	e7f7      	b.n	8001be8 <__sfp+0x14>
 8001bf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bfc:	b16d      	cbz	r5, 8001c1a <__sfp+0x46>
 8001bfe:	3468      	adds	r4, #104	; 0x68
 8001c00:	e7f4      	b.n	8001bec <__sfp+0x18>
 8001c02:	2104      	movs	r1, #4
 8001c04:	4638      	mov	r0, r7
 8001c06:	f7ff ff9f 	bl	8001b48 <__sfmoreglue>
 8001c0a:	6030      	str	r0, [r6, #0]
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d1f1      	bne.n	8001bf4 <__sfp+0x20>
 8001c10:	230c      	movs	r3, #12
 8001c12:	4604      	mov	r4, r0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4620      	mov	r0, r4
 8001c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <__sfp+0x74>)
 8001c1c:	6665      	str	r5, [r4, #100]	; 0x64
 8001c1e:	e9c4 5500 	strd	r5, r5, [r4]
 8001c22:	60a5      	str	r5, [r4, #8]
 8001c24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001c28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c34:	f7ff fd70 	bl	8001718 <memset>
 8001c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c40:	e7e9      	b.n	8001c16 <__sfp+0x42>
 8001c42:	bf00      	nop
 8001c44:	0800261c 	.word	0x0800261c
 8001c48:	ffff0001 	.word	0xffff0001

08001c4c <_fwalk_reent>:
 8001c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c50:	4680      	mov	r8, r0
 8001c52:	4689      	mov	r9, r1
 8001c54:	2600      	movs	r6, #0
 8001c56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c5a:	b914      	cbnz	r4, 8001c62 <_fwalk_reent+0x16>
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c62:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c66:	3f01      	subs	r7, #1
 8001c68:	d501      	bpl.n	8001c6e <_fwalk_reent+0x22>
 8001c6a:	6824      	ldr	r4, [r4, #0]
 8001c6c:	e7f5      	b.n	8001c5a <_fwalk_reent+0xe>
 8001c6e:	89ab      	ldrh	r3, [r5, #12]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d907      	bls.n	8001c84 <_fwalk_reent+0x38>
 8001c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	d003      	beq.n	8001c84 <_fwalk_reent+0x38>
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	4640      	mov	r0, r8
 8001c80:	47c8      	blx	r9
 8001c82:	4306      	orrs	r6, r0
 8001c84:	3568      	adds	r5, #104	; 0x68
 8001c86:	e7ee      	b.n	8001c66 <_fwalk_reent+0x1a>

08001c88 <__swhatbuf_r>:
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	460e      	mov	r6, r1
 8001c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c90:	b096      	sub	sp, #88	; 0x58
 8001c92:	2900      	cmp	r1, #0
 8001c94:	4614      	mov	r4, r2
 8001c96:	461d      	mov	r5, r3
 8001c98:	da07      	bge.n	8001caa <__swhatbuf_r+0x22>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	602b      	str	r3, [r5, #0]
 8001c9e:	89b3      	ldrh	r3, [r6, #12]
 8001ca0:	061a      	lsls	r2, r3, #24
 8001ca2:	d410      	bmi.n	8001cc6 <__swhatbuf_r+0x3e>
 8001ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca8:	e00e      	b.n	8001cc8 <__swhatbuf_r+0x40>
 8001caa:	466a      	mov	r2, sp
 8001cac:	f000 f96c 	bl	8001f88 <_fstat_r>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	dbf2      	blt.n	8001c9a <__swhatbuf_r+0x12>
 8001cb4:	9a01      	ldr	r2, [sp, #4]
 8001cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001cbe:	425a      	negs	r2, r3
 8001cc0:	415a      	adcs	r2, r3
 8001cc2:	602a      	str	r2, [r5, #0]
 8001cc4:	e7ee      	b.n	8001ca4 <__swhatbuf_r+0x1c>
 8001cc6:	2340      	movs	r3, #64	; 0x40
 8001cc8:	2000      	movs	r0, #0
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	b016      	add	sp, #88	; 0x58
 8001cce:	bd70      	pop	{r4, r5, r6, pc}

08001cd0 <__smakebuf_r>:
 8001cd0:	898b      	ldrh	r3, [r1, #12]
 8001cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cd4:	079d      	lsls	r5, r3, #30
 8001cd6:	4606      	mov	r6, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	d507      	bpl.n	8001cec <__smakebuf_r+0x1c>
 8001cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	6123      	str	r3, [r4, #16]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	6163      	str	r3, [r4, #20]
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	ab01      	add	r3, sp, #4
 8001cee:	466a      	mov	r2, sp
 8001cf0:	f7ff ffca 	bl	8001c88 <__swhatbuf_r>
 8001cf4:	9900      	ldr	r1, [sp, #0]
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	f000 f875 	bl	8001de8 <_malloc_r>
 8001cfe:	b948      	cbnz	r0, 8001d14 <__smakebuf_r+0x44>
 8001d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d04:	059a      	lsls	r2, r3, #22
 8001d06:	d4ef      	bmi.n	8001ce8 <__smakebuf_r+0x18>
 8001d08:	f023 0303 	bic.w	r3, r3, #3
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	81a3      	strh	r3, [r4, #12]
 8001d12:	e7e3      	b.n	8001cdc <__smakebuf_r+0xc>
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <__smakebuf_r+0x7c>)
 8001d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d18:	89a3      	ldrh	r3, [r4, #12]
 8001d1a:	6020      	str	r0, [r4, #0]
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d20:	81a3      	strh	r3, [r4, #12]
 8001d22:	9b00      	ldr	r3, [sp, #0]
 8001d24:	6120      	str	r0, [r4, #16]
 8001d26:	6163      	str	r3, [r4, #20]
 8001d28:	9b01      	ldr	r3, [sp, #4]
 8001d2a:	b15b      	cbz	r3, 8001d44 <__smakebuf_r+0x74>
 8001d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d30:	4630      	mov	r0, r6
 8001d32:	f000 f93b 	bl	8001fac <_isatty_r>
 8001d36:	b128      	cbz	r0, 8001d44 <__smakebuf_r+0x74>
 8001d38:	89a3      	ldrh	r3, [r4, #12]
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	81a3      	strh	r3, [r4, #12]
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	431d      	orrs	r5, r3
 8001d48:	81a5      	strh	r5, [r4, #12]
 8001d4a:	e7cd      	b.n	8001ce8 <__smakebuf_r+0x18>
 8001d4c:	08001b3d 	.word	0x08001b3d

08001d50 <_free_r>:
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4605      	mov	r5, r0
 8001d54:	2900      	cmp	r1, #0
 8001d56:	d043      	beq.n	8001de0 <_free_r+0x90>
 8001d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d5c:	1f0c      	subs	r4, r1, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bfb8      	it	lt
 8001d62:	18e4      	addlt	r4, r4, r3
 8001d64:	f000 f944 	bl	8001ff0 <__malloc_lock>
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <_free_r+0x94>)
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	b933      	cbnz	r3, 8001d7e <_free_r+0x2e>
 8001d70:	6063      	str	r3, [r4, #4]
 8001d72:	6014      	str	r4, [r2, #0]
 8001d74:	4628      	mov	r0, r5
 8001d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d7a:	f000 b93a 	b.w	8001ff2 <__malloc_unlock>
 8001d7e:	42a3      	cmp	r3, r4
 8001d80:	d90b      	bls.n	8001d9a <_free_r+0x4a>
 8001d82:	6821      	ldr	r1, [r4, #0]
 8001d84:	1862      	adds	r2, r4, r1
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bf01      	itttt	eq
 8001d8a:	681a      	ldreq	r2, [r3, #0]
 8001d8c:	685b      	ldreq	r3, [r3, #4]
 8001d8e:	1852      	addeq	r2, r2, r1
 8001d90:	6022      	streq	r2, [r4, #0]
 8001d92:	6063      	str	r3, [r4, #4]
 8001d94:	6004      	str	r4, [r0, #0]
 8001d96:	e7ed      	b.n	8001d74 <_free_r+0x24>
 8001d98:	4613      	mov	r3, r2
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	b10a      	cbz	r2, 8001da2 <_free_r+0x52>
 8001d9e:	42a2      	cmp	r2, r4
 8001da0:	d9fa      	bls.n	8001d98 <_free_r+0x48>
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	1858      	adds	r0, r3, r1
 8001da6:	42a0      	cmp	r0, r4
 8001da8:	d10b      	bne.n	8001dc2 <_free_r+0x72>
 8001daa:	6820      	ldr	r0, [r4, #0]
 8001dac:	4401      	add	r1, r0
 8001dae:	1858      	adds	r0, r3, r1
 8001db0:	4282      	cmp	r2, r0
 8001db2:	6019      	str	r1, [r3, #0]
 8001db4:	d1de      	bne.n	8001d74 <_free_r+0x24>
 8001db6:	6810      	ldr	r0, [r2, #0]
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	4401      	add	r1, r0
 8001dbc:	6019      	str	r1, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	e7d8      	b.n	8001d74 <_free_r+0x24>
 8001dc2:	d902      	bls.n	8001dca <_free_r+0x7a>
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	602b      	str	r3, [r5, #0]
 8001dc8:	e7d4      	b.n	8001d74 <_free_r+0x24>
 8001dca:	6820      	ldr	r0, [r4, #0]
 8001dcc:	1821      	adds	r1, r4, r0
 8001dce:	428a      	cmp	r2, r1
 8001dd0:	bf01      	itttt	eq
 8001dd2:	6811      	ldreq	r1, [r2, #0]
 8001dd4:	6852      	ldreq	r2, [r2, #4]
 8001dd6:	1809      	addeq	r1, r1, r0
 8001dd8:	6021      	streq	r1, [r4, #0]
 8001dda:	6062      	str	r2, [r4, #4]
 8001ddc:	605c      	str	r4, [r3, #4]
 8001dde:	e7c9      	b.n	8001d74 <_free_r+0x24>
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	20000098 	.word	0x20000098

08001de8 <_malloc_r>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	1ccd      	adds	r5, r1, #3
 8001dec:	f025 0503 	bic.w	r5, r5, #3
 8001df0:	3508      	adds	r5, #8
 8001df2:	2d0c      	cmp	r5, #12
 8001df4:	bf38      	it	cc
 8001df6:	250c      	movcc	r5, #12
 8001df8:	2d00      	cmp	r5, #0
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	db01      	blt.n	8001e02 <_malloc_r+0x1a>
 8001dfe:	42a9      	cmp	r1, r5
 8001e00:	d903      	bls.n	8001e0a <_malloc_r+0x22>
 8001e02:	230c      	movs	r3, #12
 8001e04:	6033      	str	r3, [r6, #0]
 8001e06:	2000      	movs	r0, #0
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
 8001e0a:	f000 f8f1 	bl	8001ff0 <__malloc_lock>
 8001e0e:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <_malloc_r+0xac>)
 8001e10:	6814      	ldr	r4, [r2, #0]
 8001e12:	4621      	mov	r1, r4
 8001e14:	b991      	cbnz	r1, 8001e3c <_malloc_r+0x54>
 8001e16:	4c20      	ldr	r4, [pc, #128]	; (8001e98 <_malloc_r+0xb0>)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	b91b      	cbnz	r3, 8001e24 <_malloc_r+0x3c>
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f000 f83d 	bl	8001e9c <_sbrk_r>
 8001e22:	6020      	str	r0, [r4, #0]
 8001e24:	4629      	mov	r1, r5
 8001e26:	4630      	mov	r0, r6
 8001e28:	f000 f838 	bl	8001e9c <_sbrk_r>
 8001e2c:	1c43      	adds	r3, r0, #1
 8001e2e:	d124      	bne.n	8001e7a <_malloc_r+0x92>
 8001e30:	230c      	movs	r3, #12
 8001e32:	4630      	mov	r0, r6
 8001e34:	6033      	str	r3, [r6, #0]
 8001e36:	f000 f8dc 	bl	8001ff2 <__malloc_unlock>
 8001e3a:	e7e4      	b.n	8001e06 <_malloc_r+0x1e>
 8001e3c:	680b      	ldr	r3, [r1, #0]
 8001e3e:	1b5b      	subs	r3, r3, r5
 8001e40:	d418      	bmi.n	8001e74 <_malloc_r+0x8c>
 8001e42:	2b0b      	cmp	r3, #11
 8001e44:	d90f      	bls.n	8001e66 <_malloc_r+0x7e>
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	18cc      	adds	r4, r1, r3
 8001e4a:	50cd      	str	r5, [r1, r3]
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f000 f8d0 	bl	8001ff2 <__malloc_unlock>
 8001e52:	f104 000b 	add.w	r0, r4, #11
 8001e56:	1d23      	adds	r3, r4, #4
 8001e58:	f020 0007 	bic.w	r0, r0, #7
 8001e5c:	1ac3      	subs	r3, r0, r3
 8001e5e:	d0d3      	beq.n	8001e08 <_malloc_r+0x20>
 8001e60:	425a      	negs	r2, r3
 8001e62:	50e2      	str	r2, [r4, r3]
 8001e64:	e7d0      	b.n	8001e08 <_malloc_r+0x20>
 8001e66:	684b      	ldr	r3, [r1, #4]
 8001e68:	428c      	cmp	r4, r1
 8001e6a:	bf16      	itet	ne
 8001e6c:	6063      	strne	r3, [r4, #4]
 8001e6e:	6013      	streq	r3, [r2, #0]
 8001e70:	460c      	movne	r4, r1
 8001e72:	e7eb      	b.n	8001e4c <_malloc_r+0x64>
 8001e74:	460c      	mov	r4, r1
 8001e76:	6849      	ldr	r1, [r1, #4]
 8001e78:	e7cc      	b.n	8001e14 <_malloc_r+0x2c>
 8001e7a:	1cc4      	adds	r4, r0, #3
 8001e7c:	f024 0403 	bic.w	r4, r4, #3
 8001e80:	42a0      	cmp	r0, r4
 8001e82:	d005      	beq.n	8001e90 <_malloc_r+0xa8>
 8001e84:	1a21      	subs	r1, r4, r0
 8001e86:	4630      	mov	r0, r6
 8001e88:	f000 f808 	bl	8001e9c <_sbrk_r>
 8001e8c:	3001      	adds	r0, #1
 8001e8e:	d0cf      	beq.n	8001e30 <_malloc_r+0x48>
 8001e90:	6025      	str	r5, [r4, #0]
 8001e92:	e7db      	b.n	8001e4c <_malloc_r+0x64>
 8001e94:	20000098 	.word	0x20000098
 8001e98:	2000009c 	.word	0x2000009c

08001e9c <_sbrk_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	4c05      	ldr	r4, [pc, #20]	; (8001eb8 <_sbrk_r+0x1c>)
 8001ea2:	4605      	mov	r5, r0
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	6023      	str	r3, [r4, #0]
 8001ea8:	f7fe fb2a 	bl	8000500 <_sbrk>
 8001eac:	1c43      	adds	r3, r0, #1
 8001eae:	d102      	bne.n	8001eb6 <_sbrk_r+0x1a>
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	b103      	cbz	r3, 8001eb6 <_sbrk_r+0x1a>
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}
 8001eb8:	20000190 	.word	0x20000190

08001ebc <__sread>:
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec4:	f000 f896 	bl	8001ff4 <_read_r>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	bfab      	itete	ge
 8001ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ece:	89a3      	ldrhlt	r3, [r4, #12]
 8001ed0:	181b      	addge	r3, r3, r0
 8001ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ed6:	bfac      	ite	ge
 8001ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001eda:	81a3      	strhlt	r3, [r4, #12]
 8001edc:	bd10      	pop	{r4, pc}

08001ede <__swrite>:
 8001ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee2:	461f      	mov	r7, r3
 8001ee4:	898b      	ldrh	r3, [r1, #12]
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	05db      	lsls	r3, r3, #23
 8001eea:	460c      	mov	r4, r1
 8001eec:	4616      	mov	r6, r2
 8001eee:	d505      	bpl.n	8001efc <__swrite+0x1e>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef8:	f000 f868 	bl	8001fcc <_lseek_r>
 8001efc:	89a3      	ldrh	r3, [r4, #12]
 8001efe:	4632      	mov	r2, r6
 8001f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f04:	81a3      	strh	r3, [r4, #12]
 8001f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f12:	f000 b817 	b.w	8001f44 <_write_r>

08001f16 <__sseek>:
 8001f16:	b510      	push	{r4, lr}
 8001f18:	460c      	mov	r4, r1
 8001f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f1e:	f000 f855 	bl	8001fcc <_lseek_r>
 8001f22:	1c43      	adds	r3, r0, #1
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	bf15      	itete	ne
 8001f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f32:	81a3      	strheq	r3, [r4, #12]
 8001f34:	bf18      	it	ne
 8001f36:	81a3      	strhne	r3, [r4, #12]
 8001f38:	bd10      	pop	{r4, pc}

08001f3a <__sclose>:
 8001f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f3e:	f000 b813 	b.w	8001f68 <_close_r>
	...

08001f44 <_write_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	4605      	mov	r5, r0
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4c05      	ldr	r4, [pc, #20]	; (8001f64 <_write_r+0x20>)
 8001f50:	6022      	str	r2, [r4, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f000 f911 	bl	800217a <_write>
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	d102      	bne.n	8001f62 <_write_r+0x1e>
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	b103      	cbz	r3, 8001f62 <_write_r+0x1e>
 8001f60:	602b      	str	r3, [r5, #0]
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
 8001f64:	20000190 	.word	0x20000190

08001f68 <_close_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	4c05      	ldr	r4, [pc, #20]	; (8001f84 <_close_r+0x1c>)
 8001f6e:	4605      	mov	r5, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	6023      	str	r3, [r4, #0]
 8001f74:	f000 f930 	bl	80021d8 <_close>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_close_r+0x1a>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_close_r+0x1a>
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	20000190 	.word	0x20000190

08001f88 <_fstat_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	4c06      	ldr	r4, [pc, #24]	; (8001fa8 <_fstat_r+0x20>)
 8001f8e:	4605      	mov	r5, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	f000 f966 	bl	8002266 <_fstat>
 8001f9a:	1c43      	adds	r3, r0, #1
 8001f9c:	d102      	bne.n	8001fa4 <_fstat_r+0x1c>
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	b103      	cbz	r3, 8001fa4 <_fstat_r+0x1c>
 8001fa2:	602b      	str	r3, [r5, #0]
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000190 	.word	0x20000190

08001fac <_isatty_r>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4c05      	ldr	r4, [pc, #20]	; (8001fc8 <_isatty_r+0x1c>)
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	6023      	str	r3, [r4, #0]
 8001fb8:	f000 fab8 	bl	800252c <_isatty>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	d102      	bne.n	8001fc6 <_isatty_r+0x1a>
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	b103      	cbz	r3, 8001fc6 <_isatty_r+0x1a>
 8001fc4:	602b      	str	r3, [r5, #0]
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	20000190 	.word	0x20000190

08001fcc <_lseek_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4605      	mov	r5, r0
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4c05      	ldr	r4, [pc, #20]	; (8001fec <_lseek_r+0x20>)
 8001fd8:	6022      	str	r2, [r4, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f000 f8bb 	bl	8002156 <_lseek>
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	d102      	bne.n	8001fea <_lseek_r+0x1e>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	b103      	cbz	r3, 8001fea <_lseek_r+0x1e>
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	bd38      	pop	{r3, r4, r5, pc}
 8001fec:	20000190 	.word	0x20000190

08001ff0 <__malloc_lock>:
 8001ff0:	4770      	bx	lr

08001ff2 <__malloc_unlock>:
 8001ff2:	4770      	bx	lr

08001ff4 <_read_r>:
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	4605      	mov	r5, r0
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4c05      	ldr	r4, [pc, #20]	; (8002014 <_read_r+0x20>)
 8002000:	6022      	str	r2, [r4, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	f000 f850 	bl	80020a8 <_read>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_read_r+0x1e>
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	b103      	cbz	r3, 8002012 <_read_r+0x1e>
 8002010:	602b      	str	r3, [r5, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	20000190 	.word	0x20000190

08002018 <findslot>:
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <findslot+0x2c>)
 800201a:	b510      	push	{r4, lr}
 800201c:	4604      	mov	r4, r0
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	b118      	cbz	r0, 800202a <findslot+0x12>
 8002022:	6983      	ldr	r3, [r0, #24]
 8002024:	b90b      	cbnz	r3, 800202a <findslot+0x12>
 8002026:	f7ff fda5 	bl	8001b74 <__sinit>
 800202a:	2c13      	cmp	r4, #19
 800202c:	d807      	bhi.n	800203e <findslot+0x26>
 800202e:	4806      	ldr	r0, [pc, #24]	; (8002048 <findslot+0x30>)
 8002030:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002034:	3301      	adds	r3, #1
 8002036:	d002      	beq.n	800203e <findslot+0x26>
 8002038:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800203c:	bd10      	pop	{r4, pc}
 800203e:	2000      	movs	r0, #0
 8002040:	e7fc      	b.n	800203c <findslot+0x24>
 8002042:	bf00      	nop
 8002044:	2000000c 	.word	0x2000000c
 8002048:	200000ac 	.word	0x200000ac

0800204c <checkerror>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	1c43      	adds	r3, r0, #1
 8002050:	4605      	mov	r5, r0
 8002052:	d109      	bne.n	8002068 <checkerror+0x1c>
 8002054:	f7ff fb36 	bl	80016c4 <__errno>
 8002058:	2413      	movs	r4, #19
 800205a:	4606      	mov	r6, r0
 800205c:	2700      	movs	r7, #0
 800205e:	4620      	mov	r0, r4
 8002060:	4639      	mov	r1, r7
 8002062:	beab      	bkpt	0x00ab
 8002064:	4604      	mov	r4, r0
 8002066:	6034      	str	r4, [r6, #0]
 8002068:	4628      	mov	r0, r5
 800206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800206c <error>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	4605      	mov	r5, r0
 8002070:	f7ff fb28 	bl	80016c4 <__errno>
 8002074:	2413      	movs	r4, #19
 8002076:	4606      	mov	r6, r0
 8002078:	2700      	movs	r7, #0
 800207a:	4620      	mov	r0, r4
 800207c:	4639      	mov	r1, r7
 800207e:	beab      	bkpt	0x00ab
 8002080:	4604      	mov	r4, r0
 8002082:	6034      	str	r4, [r6, #0]
 8002084:	4628      	mov	r0, r5
 8002086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002088 <_swiread>:
 8002088:	b530      	push	{r4, r5, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002090:	9203      	str	r2, [sp, #12]
 8002092:	2406      	movs	r4, #6
 8002094:	ad01      	add	r5, sp, #4
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	beab      	bkpt	0x00ab
 800209c:	4604      	mov	r4, r0
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff ffd4 	bl	800204c <checkerror>
 80020a4:	b005      	add	sp, #20
 80020a6:	bd30      	pop	{r4, r5, pc}

080020a8 <_read>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	460e      	mov	r6, r1
 80020ac:	4615      	mov	r5, r2
 80020ae:	f7ff ffb3 	bl	8002018 <findslot>
 80020b2:	4604      	mov	r4, r0
 80020b4:	b930      	cbnz	r0, 80020c4 <_read+0x1c>
 80020b6:	f7ff fb05 	bl	80016c4 <__errno>
 80020ba:	2309      	movs	r3, #9
 80020bc:	6003      	str	r3, [r0, #0]
 80020be:	f04f 30ff 	mov.w	r0, #4294967295
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	462a      	mov	r2, r5
 80020c6:	4631      	mov	r1, r6
 80020c8:	6800      	ldr	r0, [r0, #0]
 80020ca:	f7ff ffdd 	bl	8002088 <_swiread>
 80020ce:	1c43      	adds	r3, r0, #1
 80020d0:	bf1f      	itttt	ne
 80020d2:	6863      	ldrne	r3, [r4, #4]
 80020d4:	1a28      	subne	r0, r5, r0
 80020d6:	181b      	addne	r3, r3, r0
 80020d8:	6063      	strne	r3, [r4, #4]
 80020da:	e7f2      	b.n	80020c2 <_read+0x1a>

080020dc <_swilseek>:
 80020dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020de:	460c      	mov	r4, r1
 80020e0:	4616      	mov	r6, r2
 80020e2:	f7ff ff99 	bl	8002018 <findslot>
 80020e6:	4605      	mov	r5, r0
 80020e8:	b940      	cbnz	r0, 80020fc <_swilseek+0x20>
 80020ea:	f7ff faeb 	bl	80016c4 <__errno>
 80020ee:	2309      	movs	r3, #9
 80020f0:	6003      	str	r3, [r0, #0]
 80020f2:	f04f 34ff 	mov.w	r4, #4294967295
 80020f6:	4620      	mov	r0, r4
 80020f8:	b003      	add	sp, #12
 80020fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fc:	2e02      	cmp	r6, #2
 80020fe:	d903      	bls.n	8002108 <_swilseek+0x2c>
 8002100:	f7ff fae0 	bl	80016c4 <__errno>
 8002104:	2316      	movs	r3, #22
 8002106:	e7f3      	b.n	80020f0 <_swilseek+0x14>
 8002108:	2e01      	cmp	r6, #1
 800210a:	d112      	bne.n	8002132 <_swilseek+0x56>
 800210c:	6843      	ldr	r3, [r0, #4]
 800210e:	18e4      	adds	r4, r4, r3
 8002110:	d4f6      	bmi.n	8002100 <_swilseek+0x24>
 8002112:	682b      	ldr	r3, [r5, #0]
 8002114:	260a      	movs	r6, #10
 8002116:	e9cd 3400 	strd	r3, r4, [sp]
 800211a:	466f      	mov	r7, sp
 800211c:	4630      	mov	r0, r6
 800211e:	4639      	mov	r1, r7
 8002120:	beab      	bkpt	0x00ab
 8002122:	4606      	mov	r6, r0
 8002124:	4630      	mov	r0, r6
 8002126:	f7ff ff91 	bl	800204c <checkerror>
 800212a:	2800      	cmp	r0, #0
 800212c:	dbe1      	blt.n	80020f2 <_swilseek+0x16>
 800212e:	606c      	str	r4, [r5, #4]
 8002130:	e7e1      	b.n	80020f6 <_swilseek+0x1a>
 8002132:	2e02      	cmp	r6, #2
 8002134:	d1ed      	bne.n	8002112 <_swilseek+0x36>
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	af02      	add	r7, sp, #8
 800213a:	f847 3d08 	str.w	r3, [r7, #-8]!
 800213e:	260c      	movs	r6, #12
 8002140:	4630      	mov	r0, r6
 8002142:	4639      	mov	r1, r7
 8002144:	beab      	bkpt	0x00ab
 8002146:	4606      	mov	r6, r0
 8002148:	4630      	mov	r0, r6
 800214a:	f7ff ff7f 	bl	800204c <checkerror>
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	d0cf      	beq.n	80020f2 <_swilseek+0x16>
 8002152:	4404      	add	r4, r0
 8002154:	e7dd      	b.n	8002112 <_swilseek+0x36>

08002156 <_lseek>:
 8002156:	f7ff bfc1 	b.w	80020dc <_swilseek>

0800215a <_swiwrite>:
 800215a:	b530      	push	{r4, r5, lr}
 800215c:	b085      	sub	sp, #20
 800215e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002162:	9203      	str	r2, [sp, #12]
 8002164:	2405      	movs	r4, #5
 8002166:	ad01      	add	r5, sp, #4
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	beab      	bkpt	0x00ab
 800216e:	4604      	mov	r4, r0
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff ff6b 	bl	800204c <checkerror>
 8002176:	b005      	add	sp, #20
 8002178:	bd30      	pop	{r4, r5, pc}

0800217a <_write>:
 800217a:	b570      	push	{r4, r5, r6, lr}
 800217c:	460e      	mov	r6, r1
 800217e:	4615      	mov	r5, r2
 8002180:	f7ff ff4a 	bl	8002018 <findslot>
 8002184:	4604      	mov	r4, r0
 8002186:	b930      	cbnz	r0, 8002196 <_write+0x1c>
 8002188:	f7ff fa9c 	bl	80016c4 <__errno>
 800218c:	2309      	movs	r3, #9
 800218e:	6003      	str	r3, [r0, #0]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	462a      	mov	r2, r5
 8002198:	4631      	mov	r1, r6
 800219a:	6800      	ldr	r0, [r0, #0]
 800219c:	f7ff ffdd 	bl	800215a <_swiwrite>
 80021a0:	1e02      	subs	r2, r0, #0
 80021a2:	dbf5      	blt.n	8002190 <_write+0x16>
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	1aa8      	subs	r0, r5, r2
 80021a8:	4403      	add	r3, r0
 80021aa:	42aa      	cmp	r2, r5
 80021ac:	6063      	str	r3, [r4, #4]
 80021ae:	d1f1      	bne.n	8002194 <_write+0x1a>
 80021b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff bf59 	b.w	800206c <error>

080021ba <_swiclose>:
 80021ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021bc:	ad02      	add	r5, sp, #8
 80021be:	f845 0d04 	str.w	r0, [r5, #-4]!
 80021c2:	2402      	movs	r4, #2
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	beab      	bkpt	0x00ab
 80021ca:	4604      	mov	r4, r0
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ff3d 	bl	800204c <checkerror>
 80021d2:	b003      	add	sp, #12
 80021d4:	bd30      	pop	{r4, r5, pc}
	...

080021d8 <_close>:
 80021d8:	b538      	push	{r3, r4, r5, lr}
 80021da:	4605      	mov	r5, r0
 80021dc:	f7ff ff1c 	bl	8002018 <findslot>
 80021e0:	4604      	mov	r4, r0
 80021e2:	b930      	cbnz	r0, 80021f2 <_close+0x1a>
 80021e4:	f7ff fa6e 	bl	80016c4 <__errno>
 80021e8:	2309      	movs	r3, #9
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	bd38      	pop	{r3, r4, r5, pc}
 80021f2:	3d01      	subs	r5, #1
 80021f4:	2d01      	cmp	r5, #1
 80021f6:	d809      	bhi.n	800220c <_close+0x34>
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <_close+0x48>)
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d104      	bne.n	800220c <_close+0x34>
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	6003      	str	r3, [r0, #0]
 8002208:	2000      	movs	r0, #0
 800220a:	e7f1      	b.n	80021f0 <_close+0x18>
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	f7ff ffd4 	bl	80021ba <_swiclose>
 8002212:	2800      	cmp	r0, #0
 8002214:	d1ec      	bne.n	80021f0 <_close+0x18>
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	e7e8      	b.n	80021f0 <_close+0x18>
 800221e:	bf00      	nop
 8002220:	200000ac 	.word	0x200000ac

08002224 <_swistat>:
 8002224:	b570      	push	{r4, r5, r6, lr}
 8002226:	460c      	mov	r4, r1
 8002228:	f7ff fef6 	bl	8002018 <findslot>
 800222c:	4606      	mov	r6, r0
 800222e:	b930      	cbnz	r0, 800223e <_swistat+0x1a>
 8002230:	f7ff fa48 	bl	80016c4 <__errno>
 8002234:	2309      	movs	r3, #9
 8002236:	6003      	str	r3, [r0, #0]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	6863      	ldr	r3, [r4, #4]
 8002240:	250c      	movs	r5, #12
 8002242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002246:	6063      	str	r3, [r4, #4]
 8002248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224c:	6463      	str	r3, [r4, #68]	; 0x44
 800224e:	4628      	mov	r0, r5
 8002250:	4631      	mov	r1, r6
 8002252:	beab      	bkpt	0x00ab
 8002254:	4605      	mov	r5, r0
 8002256:	4628      	mov	r0, r5
 8002258:	f7ff fef8 	bl	800204c <checkerror>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	bf1c      	itt	ne
 8002260:	6120      	strne	r0, [r4, #16]
 8002262:	2000      	movne	r0, #0
 8002264:	e7ea      	b.n	800223c <_swistat+0x18>

08002266 <_fstat>:
 8002266:	460b      	mov	r3, r1
 8002268:	b510      	push	{r4, lr}
 800226a:	2100      	movs	r1, #0
 800226c:	4604      	mov	r4, r0
 800226e:	2258      	movs	r2, #88	; 0x58
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fa51 	bl	8001718 <memset>
 8002276:	4601      	mov	r1, r0
 8002278:	4620      	mov	r0, r4
 800227a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800227e:	f7ff bfd1 	b.w	8002224 <_swistat>

08002282 <_stat>:
 8002282:	b538      	push	{r3, r4, r5, lr}
 8002284:	460d      	mov	r5, r1
 8002286:	4604      	mov	r4, r0
 8002288:	2258      	movs	r2, #88	; 0x58
 800228a:	2100      	movs	r1, #0
 800228c:	4628      	mov	r0, r5
 800228e:	f7ff fa43 	bl	8001718 <memset>
 8002292:	4620      	mov	r0, r4
 8002294:	2100      	movs	r1, #0
 8002296:	f000 f811 	bl	80022bc <_swiopen>
 800229a:	1c43      	adds	r3, r0, #1
 800229c:	4604      	mov	r4, r0
 800229e:	d00b      	beq.n	80022b8 <_stat+0x36>
 80022a0:	686b      	ldr	r3, [r5, #4]
 80022a2:	4629      	mov	r1, r5
 80022a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80022a8:	606b      	str	r3, [r5, #4]
 80022aa:	f7ff ffbb 	bl	8002224 <_swistat>
 80022ae:	4605      	mov	r5, r0
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff ff91 	bl	80021d8 <_close>
 80022b6:	462c      	mov	r4, r5
 80022b8:	4620      	mov	r0, r4
 80022ba:	bd38      	pop	{r3, r4, r5, pc}

080022bc <_swiopen>:
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <_swiopen+0xb0>)
 80022be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c2:	4682      	mov	sl, r0
 80022c4:	460e      	mov	r6, r1
 80022c6:	2500      	movs	r5, #0
 80022c8:	4698      	mov	r8, r3
 80022ca:	b096      	sub	sp, #88	; 0x58
 80022cc:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80022d0:	00ef      	lsls	r7, r5, #3
 80022d2:	1c61      	adds	r1, r4, #1
 80022d4:	d036      	beq.n	8002344 <_swiopen+0x88>
 80022d6:	3501      	adds	r5, #1
 80022d8:	2d14      	cmp	r5, #20
 80022da:	d1f7      	bne.n	80022cc <_swiopen+0x10>
 80022dc:	f7ff f9f2 	bl	80016c4 <__errno>
 80022e0:	2318      	movs	r3, #24
 80022e2:	f04f 34ff 	mov.w	r4, #4294967295
 80022e6:	6003      	str	r3, [r0, #0]
 80022e8:	e03c      	b.n	8002364 <_swiopen+0xa8>
 80022ea:	f240 6301 	movw	r3, #1537	; 0x601
 80022ee:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80022f2:	07b2      	lsls	r2, r6, #30
 80022f4:	bf48      	it	mi
 80022f6:	f044 0402 	orrmi.w	r4, r4, #2
 80022fa:	421e      	tst	r6, r3
 80022fc:	bf18      	it	ne
 80022fe:	f044 0404 	orrne.w	r4, r4, #4
 8002302:	0733      	lsls	r3, r6, #28
 8002304:	bf48      	it	mi
 8002306:	f024 0404 	bicmi.w	r4, r4, #4
 800230a:	4650      	mov	r0, sl
 800230c:	bf48      	it	mi
 800230e:	f044 0408 	orrmi.w	r4, r4, #8
 8002312:	f8cd a000 	str.w	sl, [sp]
 8002316:	f7fd ff19 	bl	800014c <strlen>
 800231a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800231e:	2401      	movs	r4, #1
 8002320:	4620      	mov	r0, r4
 8002322:	4649      	mov	r1, r9
 8002324:	beab      	bkpt	0x00ab
 8002326:	4604      	mov	r4, r0
 8002328:	2c00      	cmp	r4, #0
 800232a:	db06      	blt.n	800233a <_swiopen+0x7e>
 800232c:	2300      	movs	r3, #0
 800232e:	4447      	add	r7, r8
 8002330:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	462c      	mov	r4, r5
 8002338:	e014      	b.n	8002364 <_swiopen+0xa8>
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff fe96 	bl	800206c <error>
 8002340:	4604      	mov	r4, r0
 8002342:	e00f      	b.n	8002364 <_swiopen+0xa8>
 8002344:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002348:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800234c:	46e9      	mov	r9, sp
 800234e:	d1cc      	bne.n	80022ea <_swiopen+0x2e>
 8002350:	4649      	mov	r1, r9
 8002352:	4650      	mov	r0, sl
 8002354:	f7ff ff95 	bl	8002282 <_stat>
 8002358:	3001      	adds	r0, #1
 800235a:	d0c6      	beq.n	80022ea <_swiopen+0x2e>
 800235c:	f7ff f9b2 	bl	80016c4 <__errno>
 8002360:	2311      	movs	r3, #17
 8002362:	6003      	str	r3, [r0, #0]
 8002364:	4620      	mov	r0, r4
 8002366:	b016      	add	sp, #88	; 0x58
 8002368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236c:	200000ac 	.word	0x200000ac

08002370 <_get_semihosting_exts>:
 8002370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002374:	4607      	mov	r7, r0
 8002376:	4688      	mov	r8, r1
 8002378:	4829      	ldr	r0, [pc, #164]	; (8002420 <_get_semihosting_exts+0xb0>)
 800237a:	2100      	movs	r1, #0
 800237c:	4615      	mov	r5, r2
 800237e:	f7ff ff9d 	bl	80022bc <_swiopen>
 8002382:	4604      	mov	r4, r0
 8002384:	462a      	mov	r2, r5
 8002386:	2100      	movs	r1, #0
 8002388:	4638      	mov	r0, r7
 800238a:	f7ff f9c5 	bl	8001718 <memset>
 800238e:	1c63      	adds	r3, r4, #1
 8002390:	d015      	beq.n	80023be <_get_semihosting_exts+0x4e>
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff fe40 	bl	8002018 <findslot>
 8002398:	260c      	movs	r6, #12
 800239a:	4681      	mov	r9, r0
 800239c:	4630      	mov	r0, r6
 800239e:	4649      	mov	r1, r9
 80023a0:	beab      	bkpt	0x00ab
 80023a2:	4606      	mov	r6, r0
 80023a4:	4630      	mov	r0, r6
 80023a6:	f7ff fe51 	bl	800204c <checkerror>
 80023aa:	2803      	cmp	r0, #3
 80023ac:	dd02      	ble.n	80023b4 <_get_semihosting_exts+0x44>
 80023ae:	3803      	subs	r0, #3
 80023b0:	42a8      	cmp	r0, r5
 80023b2:	dc08      	bgt.n	80023c6 <_get_semihosting_exts+0x56>
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff ff0f 	bl	80021d8 <_close>
 80023ba:	f04f 34ff 	mov.w	r4, #4294967295
 80023be:	4620      	mov	r0, r4
 80023c0:	b003      	add	sp, #12
 80023c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023c6:	2204      	movs	r2, #4
 80023c8:	4620      	mov	r0, r4
 80023ca:	eb0d 0102 	add.w	r1, sp, r2
 80023ce:	f7ff fe6b 	bl	80020a8 <_read>
 80023d2:	2803      	cmp	r0, #3
 80023d4:	ddee      	ble.n	80023b4 <_get_semihosting_exts+0x44>
 80023d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023da:	2b53      	cmp	r3, #83	; 0x53
 80023dc:	d1ea      	bne.n	80023b4 <_get_semihosting_exts+0x44>
 80023de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80023e2:	2b48      	cmp	r3, #72	; 0x48
 80023e4:	d1e6      	bne.n	80023b4 <_get_semihosting_exts+0x44>
 80023e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80023ea:	2b46      	cmp	r3, #70	; 0x46
 80023ec:	d1e2      	bne.n	80023b4 <_get_semihosting_exts+0x44>
 80023ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023f2:	2b42      	cmp	r3, #66	; 0x42
 80023f4:	d1de      	bne.n	80023b4 <_get_semihosting_exts+0x44>
 80023f6:	2201      	movs	r2, #1
 80023f8:	4641      	mov	r1, r8
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff fe6e 	bl	80020dc <_swilseek>
 8002400:	2800      	cmp	r0, #0
 8002402:	dbd7      	blt.n	80023b4 <_get_semihosting_exts+0x44>
 8002404:	462a      	mov	r2, r5
 8002406:	4639      	mov	r1, r7
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff fe4d 	bl	80020a8 <_read>
 800240e:	4605      	mov	r5, r0
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff fee1 	bl	80021d8 <_close>
 8002416:	4628      	mov	r0, r5
 8002418:	f7ff fe18 	bl	800204c <checkerror>
 800241c:	4604      	mov	r4, r0
 800241e:	e7ce      	b.n	80023be <_get_semihosting_exts+0x4e>
 8002420:	08002680 	.word	0x08002680

08002424 <initialise_semihosting_exts>:
 8002424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002426:	2100      	movs	r1, #0
 8002428:	2201      	movs	r2, #1
 800242a:	4d09      	ldr	r5, [pc, #36]	; (8002450 <initialise_semihosting_exts+0x2c>)
 800242c:	4c09      	ldr	r4, [pc, #36]	; (8002454 <initialise_semihosting_exts+0x30>)
 800242e:	a801      	add	r0, sp, #4
 8002430:	6029      	str	r1, [r5, #0]
 8002432:	6022      	str	r2, [r4, #0]
 8002434:	f7ff ff9c 	bl	8002370 <_get_semihosting_exts>
 8002438:	2800      	cmp	r0, #0
 800243a:	dd07      	ble.n	800244c <initialise_semihosting_exts+0x28>
 800243c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002440:	f003 0201 	and.w	r2, r3, #1
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	602a      	str	r2, [r5, #0]
 800244a:	6023      	str	r3, [r4, #0]
 800244c:	b003      	add	sp, #12
 800244e:	bd30      	pop	{r4, r5, pc}
 8002450:	20000070 	.word	0x20000070
 8002454:	20000074 	.word	0x20000074

08002458 <_has_ext_stdout_stderr>:
 8002458:	b510      	push	{r4, lr}
 800245a:	4c04      	ldr	r4, [pc, #16]	; (800246c <_has_ext_stdout_stderr+0x14>)
 800245c:	6822      	ldr	r2, [r4, #0]
 800245e:	2a00      	cmp	r2, #0
 8002460:	da01      	bge.n	8002466 <_has_ext_stdout_stderr+0xe>
 8002462:	f7ff ffdf 	bl	8002424 <initialise_semihosting_exts>
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	bd10      	pop	{r4, pc}
 800246a:	bf00      	nop
 800246c:	20000074 	.word	0x20000074

08002470 <initialise_monitor_handles>:
 8002470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002474:	2303      	movs	r3, #3
 8002476:	2400      	movs	r4, #0
 8002478:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002528 <initialise_monitor_handles+0xb8>
 800247c:	b085      	sub	sp, #20
 800247e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002482:	f10d 0804 	add.w	r8, sp, #4
 8002486:	9303      	str	r3, [sp, #12]
 8002488:	2501      	movs	r5, #1
 800248a:	9402      	str	r4, [sp, #8]
 800248c:	4628      	mov	r0, r5
 800248e:	4641      	mov	r1, r8
 8002490:	beab      	bkpt	0x00ab
 8002492:	4605      	mov	r5, r0
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <initialise_monitor_handles+0xa8>)
 8002496:	4623      	mov	r3, r4
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	4614      	mov	r4, r2
 800249e:	4e1f      	ldr	r6, [pc, #124]	; (800251c <initialise_monitor_handles+0xac>)
 80024a0:	6035      	str	r5, [r6, #0]
 80024a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80024a6:	3301      	adds	r3, #1
 80024a8:	2b14      	cmp	r3, #20
 80024aa:	d1fa      	bne.n	80024a2 <initialise_monitor_handles+0x32>
 80024ac:	f7ff ffd4 	bl	8002458 <_has_ext_stdout_stderr>
 80024b0:	4d1b      	ldr	r5, [pc, #108]	; (8002520 <initialise_monitor_handles+0xb0>)
 80024b2:	b1d0      	cbz	r0, 80024ea <initialise_monitor_handles+0x7a>
 80024b4:	f04f 0a03 	mov.w	sl, #3
 80024b8:	2304      	movs	r3, #4
 80024ba:	f8cd 9004 	str.w	r9, [sp, #4]
 80024be:	2701      	movs	r7, #1
 80024c0:	f8cd a00c 	str.w	sl, [sp, #12]
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	4638      	mov	r0, r7
 80024c8:	4641      	mov	r1, r8
 80024ca:	beab      	bkpt	0x00ab
 80024cc:	4683      	mov	fp, r0
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <initialise_monitor_handles+0xb4>)
 80024d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80024d4:	f8c3 b000 	str.w	fp, [r3]
 80024d8:	2308      	movs	r3, #8
 80024da:	f8cd a00c 	str.w	sl, [sp, #12]
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	4638      	mov	r0, r7
 80024e2:	4641      	mov	r1, r8
 80024e4:	beab      	bkpt	0x00ab
 80024e6:	4607      	mov	r7, r0
 80024e8:	602f      	str	r7, [r5, #0]
 80024ea:	682b      	ldr	r3, [r5, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	bf02      	ittt	eq
 80024f0:	4b0c      	ldreq	r3, [pc, #48]	; (8002524 <initialise_monitor_handles+0xb4>)
 80024f2:	681b      	ldreq	r3, [r3, #0]
 80024f4:	602b      	streq	r3, [r5, #0]
 80024f6:	6833      	ldr	r3, [r6, #0]
 80024f8:	2600      	movs	r6, #0
 80024fa:	6023      	str	r3, [r4, #0]
 80024fc:	6066      	str	r6, [r4, #4]
 80024fe:	f7ff ffab 	bl	8002458 <_has_ext_stdout_stderr>
 8002502:	b130      	cbz	r0, 8002512 <initialise_monitor_handles+0xa2>
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <initialise_monitor_handles+0xb4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002512:	b005      	add	sp, #20
 8002514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002518:	200000ac 	.word	0x200000ac
 800251c:	200000a4 	.word	0x200000a4
 8002520:	200000a0 	.word	0x200000a0
 8002524:	200000a8 	.word	0x200000a8
 8002528:	08002696 	.word	0x08002696

0800252c <_isatty>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	f7ff fd73 	bl	8002018 <findslot>
 8002532:	2509      	movs	r5, #9
 8002534:	4604      	mov	r4, r0
 8002536:	b920      	cbnz	r0, 8002542 <_isatty+0x16>
 8002538:	f7ff f8c4 	bl	80016c4 <__errno>
 800253c:	6005      	str	r5, [r0, #0]
 800253e:	4620      	mov	r0, r4
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	4628      	mov	r0, r5
 8002544:	4621      	mov	r1, r4
 8002546:	beab      	bkpt	0x00ab
 8002548:	4604      	mov	r4, r0
 800254a:	2c01      	cmp	r4, #1
 800254c:	d0f7      	beq.n	800253e <_isatty+0x12>
 800254e:	f7ff f8b9 	bl	80016c4 <__errno>
 8002552:	2400      	movs	r4, #0
 8002554:	4606      	mov	r6, r0
 8002556:	2513      	movs	r5, #19
 8002558:	4628      	mov	r0, r5
 800255a:	4621      	mov	r1, r4
 800255c:	beab      	bkpt	0x00ab
 800255e:	4605      	mov	r5, r0
 8002560:	6035      	str	r5, [r6, #0]
 8002562:	e7ec      	b.n	800253e <_isatty+0x12>

08002564 <_init>:
 8002564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002566:	bf00      	nop
 8002568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256a:	bc08      	pop	{r3}
 800256c:	469e      	mov	lr, r3
 800256e:	4770      	bx	lr

08002570 <_fini>:
 8002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002572:	bf00      	nop
 8002574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002576:	bc08      	pop	{r3}
 8002578:	469e      	mov	lr, r3
 800257a:	4770      	bx	lr
