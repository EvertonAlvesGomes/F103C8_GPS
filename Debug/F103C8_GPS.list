
F103C8_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002438  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002600  08002600  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002600  08002600  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002600  08002600  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000078  08002680  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002680  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a18  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001293  00000000  00000000  00025ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  00026d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000530  00000000  00000000  00027328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016cc3  00000000  00000000  00027858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005338  00000000  00000000  0003e51b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081e8b  00000000  00000000  00043853  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c56de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff4  00000000  00000000  000c575c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800252c 	.word	0x0800252c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800252c 	.word	0x0800252c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b09a      	sub	sp, #104	; 0x68
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t gps_data[100];
	uint8_t i = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	initialise_monitor_handles();
 8000168:	f002 f966 	bl	8002438 <initialise_monitor_handles>
	printf("Iniciando GPS..\n");
 800016c:	481a      	ldr	r0, [pc, #104]	; (80001d8 <main+0x7c>)
 800016e:	f001 faf7 	bl	8001760 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000172:	f000 f9d3 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000176:	f000 f833 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017a:	f000 f8a1 	bl	80002c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800017e:	f000 f875 	bl	800026c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart1, gps_data, 100, HAL_MAX_DELAY);
 8000182:	4639      	mov	r1, r7
 8000184:	f04f 33ff 	mov.w	r3, #4294967295
 8000188:	2264      	movs	r2, #100	; 0x64
 800018a:	4814      	ldr	r0, [pc, #80]	; (80001dc <main+0x80>)
 800018c:	f001 f8cf 	bl	800132e <HAL_UART_Receive>
	  for(i = 0; i < 100; i++) {
 8000190:	2300      	movs	r3, #0
 8000192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000196:	e016      	b.n	80001c6 <main+0x6a>
		  printf("%c", gps_data[i]);
 8000198:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800019c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80001a0:	4413      	add	r3, r2
 80001a2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fa6a 	bl	8001680 <putchar>
		  gps_data[i] = 0;
 80001ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001b0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80001b4:	4413      	add	r3, r2
 80001b6:	2200      	movs	r2, #0
 80001b8:	f803 2c68 	strb.w	r2, [r3, #-104]
	  for(i = 0; i < 100; i++) {
 80001bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001c0:	3301      	adds	r3, #1
 80001c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80001c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001ca:	2b63      	cmp	r3, #99	; 0x63
 80001cc:	d9e4      	bls.n	8000198 <main+0x3c>
	  }
	  //printf("%d\n", gps_data);
	  printf("\n");
 80001ce:	200a      	movs	r0, #10
 80001d0:	f001 fa56 	bl	8001680 <putchar>
	  HAL_UART_Receive(&huart1, gps_data, 100, HAL_MAX_DELAY);
 80001d4:	e7d5      	b.n	8000182 <main+0x26>
 80001d6:	bf00      	nop
 80001d8:	08002544 	.word	0x08002544
 80001dc:	2000014c 	.word	0x2000014c

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fa3e 	bl	8001670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000202:	2301      	movs	r3, #1
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	2301      	movs	r3, #1
 8000212:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000214:	2302      	movs	r3, #2
 8000216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fc17 	bl	8000a5c <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000234:	f000 f866 	bl	8000304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000238:	230f      	movs	r3, #15
 800023a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023c:	2302      	movs	r3, #2
 800023e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fe82 	bl	8000f5c <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800025e:	f000 f851 	bl	8000304 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_USART1_UART_Init+0x50>)
 8000274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800027c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 80002a4:	f000 fff6 	bl	8001294 <HAL_UART_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ae:	f000 f829 	bl	8000304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000014c 	.word	0x2000014c
 80002bc:	40013800 	.word	0x40013800

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_GPIO_Init+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <MX_GPIO_Init+0x40>)
 80002cc:	f043 0320 	orr.w	r3, r3, #32
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_GPIO_Init+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_GPIO_Init+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <MX_GPIO_Init+0x40>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <MX_GPIO_Init+0x40>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0304 	and.w	r3, r3, #4
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030a:	e7fe      	b.n	800030a <Error_Handler+0x6>

0800030c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <HAL_MspInit+0x5c>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a14      	ldr	r2, [pc, #80]	; (8000368 <HAL_MspInit+0x5c>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <HAL_MspInit+0x5c>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <HAL_MspInit+0x5c>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <HAL_MspInit+0x5c>)
 8000330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000334:	61d3      	str	r3, [r2, #28]
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <HAL_MspInit+0x5c>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <HAL_MspInit+0x60>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <HAL_MspInit+0x60>)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000
 800036c:	40010000 	.word	0x40010000

08000370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <HAL_UART_MspInit+0x8c>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d131      	bne.n	80003f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <HAL_UART_MspInit+0x90>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1a      	ldr	r2, [pc, #104]	; (8000400 <HAL_UART_MspInit+0x90>)
 8000396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_UART_MspInit+0x90>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <HAL_UART_MspInit+0x90>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <HAL_UART_MspInit+0x90>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_UART_MspInit+0x90>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c6:	2302      	movs	r3, #2
 80003c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ca:	2303      	movs	r3, #3
 80003cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <HAL_UART_MspInit+0x94>)
 80003d6:	f000 f9e7 	bl	80007a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	4619      	mov	r1, r3
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <HAL_UART_MspInit+0x94>)
 80003f0:	f000 f9da 	bl	80007a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40013800 	.word	0x40013800
 8000400:	40021000 	.word	0x40021000
 8000404:	40010800 	.word	0x40010800

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800040c:	e7fe      	b.n	800040c <NMI_Handler+0x4>

0800040e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000412:	e7fe      	b.n	8000412 <HardFault_Handler+0x4>

08000414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <MemManage_Handler+0x4>

0800041a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041e:	e7fe      	b.n	800041e <BusFault_Handler+0x4>

08000420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000424:	e7fe      	b.n	8000424 <UsageFault_Handler+0x4>

08000426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr

0800043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044e:	f000 f8ab 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000460:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <_sbrk+0x5c>)
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <_sbrk+0x60>)
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <_sbrk+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <_sbrk+0x64>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <_sbrk+0x68>)
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	429a      	cmp	r2, r3
 8000486:	d207      	bcs.n	8000498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000488:	f001 f8c8 	bl	800161c <__errno>
 800048c:	4602      	mov	r2, r0
 800048e:	230c      	movs	r3, #12
 8000490:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	e009      	b.n	80004ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <_sbrk+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <_sbrk+0x64>)
 80004a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004aa:	68fb      	ldr	r3, [r7, #12]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20005000 	.word	0x20005000
 80004b8:	00000400 	.word	0x00000400
 80004bc:	20000094 	.word	0x20000094
 80004c0:	20000198 	.word	0x20000198

080004c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004d2:	e003      	b.n	80004dc <LoopCopyDataInit>

080004d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004da:	3104      	adds	r1, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004dc:	480a      	ldr	r0, [pc, #40]	; (8000508 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004e4:	d3f6      	bcc.n	80004d4 <CopyDataInit>
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004e8:	e002      	b.n	80004f0 <LoopFillZerobss>

080004ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004ec:	f842 3b04 	str.w	r3, [r2], #4

080004f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004f4:	d3f9      	bcc.n	80004ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004f6:	f7ff ffe5 	bl	80004c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f001 f895 	bl	8001628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff fe2d 	bl	800015c <main>
  bx lr
 8000502:	4770      	bx	lr
  ldr r3, =_sidata
 8000504:	08002608 	.word	0x08002608
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800050c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000510:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000514:	20000194 	.word	0x20000194

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x28>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f907 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f7ff fee8 	bl	800030c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f911 	bl	800078e <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f8e7 	bl	8000756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000008 	.word	0x20000008
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_IncTick+0x1c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_IncTick+0x20>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <HAL_IncTick+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000008 	.word	0x20000008
 80005c8:	2000018c 	.word	0x2000018c

080005cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <HAL_GetTick+0x10>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	2000018c 	.word	0x2000018c

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db0a      	blt.n	800066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	490c      	ldr	r1, [pc, #48]	; (8000690 <__NVIC_SetPriority+0x4c>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066c:	e00a      	b.n	8000684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4908      	ldr	r1, [pc, #32]	; (8000694 <__NVIC_SetPriority+0x50>)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	3b04      	subs	r3, #4
 800067c:	0112      	lsls	r2, r2, #4
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	440b      	add	r3, r1
 8000682:	761a      	strb	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000698:	b480      	push	{r7}
 800069a:	b089      	sub	sp, #36	; 0x24
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	f1c3 0307 	rsb	r3, r3, #7
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	bf28      	it	cs
 80006b6:	2304      	movcs	r3, #4
 80006b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3304      	adds	r3, #4
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d902      	bls.n	80006c8 <NVIC_EncodePriority+0x30>
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3b03      	subs	r3, #3
 80006c6:	e000      	b.n	80006ca <NVIC_EncodePriority+0x32>
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	f04f 32ff 	mov.w	r2, #4294967295
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	43da      	mvns	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	401a      	ands	r2, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e0:	f04f 31ff 	mov.w	r1, #4294967295
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ea:	43d9      	mvns	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	4313      	orrs	r3, r2
         );
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3724      	adds	r7, #36	; 0x24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800070c:	d301      	bcc.n	8000712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2301      	movs	r3, #1
 8000710:	e00f      	b.n	8000732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <SysTick_Config+0x40>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800071a:	210f      	movs	r1, #15
 800071c:	f04f 30ff 	mov.w	r0, #4294967295
 8000720:	f7ff ff90 	bl	8000644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <SysTick_Config+0x40>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <SysTick_Config+0x40>)
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	e000e010 	.word	0xe000e010

08000740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff49 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000756:	b580      	push	{r7, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000768:	f7ff ff5e 	bl	8000628 <__NVIC_GetPriorityGrouping>
 800076c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	6978      	ldr	r0, [r7, #20]
 8000774:	f7ff ff90 	bl	8000698 <NVIC_EncodePriority>
 8000778:	4602      	mov	r2, r0
 800077a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff5f 	bl	8000644 <__NVIC_SetPriority>
}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffb0 	bl	80006fc <SysTick_Config>
 800079c:	4603      	mov	r3, r0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b08b      	sub	sp, #44	; 0x2c
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ba:	e127      	b.n	8000a0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007bc:	2201      	movs	r2, #1
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	4013      	ands	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	f040 8116 	bne.w	8000a06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b12      	cmp	r3, #18
 80007e0:	d034      	beq.n	800084c <HAL_GPIO_Init+0xa4>
 80007e2:	2b12      	cmp	r3, #18
 80007e4:	d80d      	bhi.n	8000802 <HAL_GPIO_Init+0x5a>
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d02b      	beq.n	8000842 <HAL_GPIO_Init+0x9a>
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d804      	bhi.n	80007f8 <HAL_GPIO_Init+0x50>
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d031      	beq.n	8000856 <HAL_GPIO_Init+0xae>
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d01c      	beq.n	8000830 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007f6:	e048      	b.n	800088a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d043      	beq.n	8000884 <HAL_GPIO_Init+0xdc>
 80007fc:	2b11      	cmp	r3, #17
 80007fe:	d01b      	beq.n	8000838 <HAL_GPIO_Init+0x90>
          break;
 8000800:	e043      	b.n	800088a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000802:	4a89      	ldr	r2, [pc, #548]	; (8000a28 <HAL_GPIO_Init+0x280>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d026      	beq.n	8000856 <HAL_GPIO_Init+0xae>
 8000808:	4a87      	ldr	r2, [pc, #540]	; (8000a28 <HAL_GPIO_Init+0x280>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d806      	bhi.n	800081c <HAL_GPIO_Init+0x74>
 800080e:	4a87      	ldr	r2, [pc, #540]	; (8000a2c <HAL_GPIO_Init+0x284>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d020      	beq.n	8000856 <HAL_GPIO_Init+0xae>
 8000814:	4a86      	ldr	r2, [pc, #536]	; (8000a30 <HAL_GPIO_Init+0x288>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d01d      	beq.n	8000856 <HAL_GPIO_Init+0xae>
          break;
 800081a:	e036      	b.n	800088a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800081c:	4a85      	ldr	r2, [pc, #532]	; (8000a34 <HAL_GPIO_Init+0x28c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d019      	beq.n	8000856 <HAL_GPIO_Init+0xae>
 8000822:	4a85      	ldr	r2, [pc, #532]	; (8000a38 <HAL_GPIO_Init+0x290>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d016      	beq.n	8000856 <HAL_GPIO_Init+0xae>
 8000828:	4a84      	ldr	r2, [pc, #528]	; (8000a3c <HAL_GPIO_Init+0x294>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d013      	beq.n	8000856 <HAL_GPIO_Init+0xae>
          break;
 800082e:	e02c      	b.n	800088a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	623b      	str	r3, [r7, #32]
          break;
 8000836:	e028      	b.n	800088a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	3304      	adds	r3, #4
 800083e:	623b      	str	r3, [r7, #32]
          break;
 8000840:	e023      	b.n	800088a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	3308      	adds	r3, #8
 8000848:	623b      	str	r3, [r7, #32]
          break;
 800084a:	e01e      	b.n	800088a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	330c      	adds	r3, #12
 8000852:	623b      	str	r3, [r7, #32]
          break;
 8000854:	e019      	b.n	800088a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800085e:	2304      	movs	r3, #4
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e012      	b.n	800088a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d105      	bne.n	8000878 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800086c:	2308      	movs	r3, #8
 800086e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	611a      	str	r2, [r3, #16]
          break;
 8000876:	e008      	b.n	800088a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000878:	2308      	movs	r3, #8
 800087a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	615a      	str	r2, [r3, #20]
          break;
 8000882:	e002      	b.n	800088a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	2bff      	cmp	r3, #255	; 0xff
 800088e:	d801      	bhi.n	8000894 <HAL_GPIO_Init+0xec>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	e001      	b.n	8000898 <HAL_GPIO_Init+0xf0>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3304      	adds	r3, #4
 8000898:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	2bff      	cmp	r3, #255	; 0xff
 800089e:	d802      	bhi.n	80008a6 <HAL_GPIO_Init+0xfe>
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	e002      	b.n	80008ac <HAL_GPIO_Init+0x104>
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	3b08      	subs	r3, #8
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	210f      	movs	r1, #15
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	401a      	ands	r2, r3
 80008be:	6a39      	ldr	r1, [r7, #32]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	431a      	orrs	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f000 8096 	beq.w	8000a06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008da:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <HAL_GPIO_Init+0x298>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a58      	ldr	r2, [pc, #352]	; (8000a40 <HAL_GPIO_Init+0x298>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <HAL_GPIO_Init+0x298>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008f2:	4a54      	ldr	r2, [pc, #336]	; (8000a44 <HAL_GPIO_Init+0x29c>)
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	3302      	adds	r3, #2
 80008fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	f003 0303 	and.w	r3, r3, #3
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	220f      	movs	r2, #15
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4013      	ands	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4b      	ldr	r2, [pc, #300]	; (8000a48 <HAL_GPIO_Init+0x2a0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d013      	beq.n	8000946 <HAL_GPIO_Init+0x19e>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a4a      	ldr	r2, [pc, #296]	; (8000a4c <HAL_GPIO_Init+0x2a4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d00d      	beq.n	8000942 <HAL_GPIO_Init+0x19a>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a49      	ldr	r2, [pc, #292]	; (8000a50 <HAL_GPIO_Init+0x2a8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d007      	beq.n	800093e <HAL_GPIO_Init+0x196>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a48      	ldr	r2, [pc, #288]	; (8000a54 <HAL_GPIO_Init+0x2ac>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_GPIO_Init+0x192>
 8000936:	2303      	movs	r3, #3
 8000938:	e006      	b.n	8000948 <HAL_GPIO_Init+0x1a0>
 800093a:	2304      	movs	r3, #4
 800093c:	e004      	b.n	8000948 <HAL_GPIO_Init+0x1a0>
 800093e:	2302      	movs	r3, #2
 8000940:	e002      	b.n	8000948 <HAL_GPIO_Init+0x1a0>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <HAL_GPIO_Init+0x1a0>
 8000946:	2300      	movs	r3, #0
 8000948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094a:	f002 0203 	and.w	r2, r2, #3
 800094e:	0092      	lsls	r2, r2, #2
 8000950:	4093      	lsls	r3, r2
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4313      	orrs	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000958:	493a      	ldr	r1, [pc, #232]	; (8000a44 <HAL_GPIO_Init+0x29c>)
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	089b      	lsrs	r3, r3, #2
 800095e:	3302      	adds	r3, #2
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000972:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4938      	ldr	r1, [pc, #224]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	600b      	str	r3, [r1, #0]
 800097e:	e006      	b.n	800098e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000980:	4b35      	ldr	r3, [pc, #212]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	43db      	mvns	r3, r3
 8000988:	4933      	ldr	r1, [pc, #204]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 800098a:	4013      	ands	r3, r2
 800098c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	492e      	ldr	r1, [pc, #184]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	604b      	str	r3, [r1, #4]
 80009a6:	e006      	b.n	80009b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4929      	ldr	r1, [pc, #164]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009b2:	4013      	ands	r3, r2
 80009b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	4924      	ldr	r1, [pc, #144]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	608b      	str	r3, [r1, #8]
 80009ce:	e006      	b.n	80009de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	491f      	ldr	r1, [pc, #124]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009da:	4013      	ands	r3, r2
 80009dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	491a      	ldr	r1, [pc, #104]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60cb      	str	r3, [r1, #12]
 80009f6:	e006      	b.n	8000a06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	4915      	ldr	r1, [pc, #84]	; (8000a58 <HAL_GPIO_Init+0x2b0>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	3301      	adds	r3, #1
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	fa22 f303 	lsr.w	r3, r2, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f47f aed0 	bne.w	80007bc <HAL_GPIO_Init+0x14>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	372c      	adds	r7, #44	; 0x2c
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	10210000 	.word	0x10210000
 8000a2c:	10110000 	.word	0x10110000
 8000a30:	10120000 	.word	0x10120000
 8000a34:	10310000 	.word	0x10310000
 8000a38:	10320000 	.word	0x10320000
 8000a3c:	10220000 	.word	0x10220000
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	40011000 	.word	0x40011000
 8000a54:	40011400 	.word	0x40011400
 8000a58:	40010400 	.word	0x40010400

08000a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e26c      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 8087 	beq.w	8000b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a7c:	4b92      	ldr	r3, [pc, #584]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 030c 	and.w	r3, r3, #12
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d00c      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a88:	4b8f      	ldr	r3, [pc, #572]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 030c 	and.w	r3, r3, #12
 8000a90:	2b08      	cmp	r3, #8
 8000a92:	d112      	bne.n	8000aba <HAL_RCC_OscConfig+0x5e>
 8000a94:	4b8c      	ldr	r3, [pc, #560]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa0:	d10b      	bne.n	8000aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa2:	4b89      	ldr	r3, [pc, #548]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d06c      	beq.n	8000b88 <HAL_RCC_OscConfig+0x12c>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d168      	bne.n	8000b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e246      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac2:	d106      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x76>
 8000ac4:	4b80      	ldr	r3, [pc, #512]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a7f      	ldr	r2, [pc, #508]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e02e      	b.n	8000b30 <HAL_RCC_OscConfig+0xd4>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10c      	bne.n	8000af4 <HAL_RCC_OscConfig+0x98>
 8000ada:	4b7b      	ldr	r3, [pc, #492]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a7a      	ldr	r2, [pc, #488]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	4b78      	ldr	r3, [pc, #480]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a77      	ldr	r2, [pc, #476]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e01d      	b.n	8000b30 <HAL_RCC_OscConfig+0xd4>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_OscConfig+0xbc>
 8000afe:	4b72      	ldr	r3, [pc, #456]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a71      	ldr	r2, [pc, #452]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b6f      	ldr	r3, [pc, #444]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a6e      	ldr	r2, [pc, #440]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e00b      	b.n	8000b30 <HAL_RCC_OscConfig+0xd4>
 8000b18:	4b6b      	ldr	r3, [pc, #428]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a6a      	ldr	r2, [pc, #424]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b68      	ldr	r3, [pc, #416]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a67      	ldr	r2, [pc, #412]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d013      	beq.n	8000b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd48 	bl	80005cc <HAL_GetTick>
 8000b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3e:	e008      	b.n	8000b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b40:	f7ff fd44 	bl	80005cc <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b64      	cmp	r3, #100	; 0x64
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e1fa      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	4b5d      	ldr	r3, [pc, #372]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f0      	beq.n	8000b40 <HAL_RCC_OscConfig+0xe4>
 8000b5e:	e014      	b.n	8000b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b60:	f7ff fd34 	bl	80005cc <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b68:	f7ff fd30 	bl	80005cc <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b64      	cmp	r3, #100	; 0x64
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e1e6      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b7a:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0x10c>
 8000b86:	e000      	b.n	8000b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d063      	beq.n	8000c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b96:	4b4c      	ldr	r3, [pc, #304]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00b      	beq.n	8000bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ba2:	4b49      	ldr	r3, [pc, #292]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d11c      	bne.n	8000be8 <HAL_RCC_OscConfig+0x18c>
 8000bae:	4b46      	ldr	r3, [pc, #280]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d116      	bne.n	8000be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bba:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d005      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x176>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d001      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e1ba      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4939      	ldr	r1, [pc, #228]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be6:	e03a      	b.n	8000c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d020      	beq.n	8000c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <HAL_RCC_OscConfig+0x270>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fce9 	bl	80005cc <HAL_GetTick>
 8000bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfc:	e008      	b.n	8000c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bfe:	f7ff fce5 	bl	80005cc <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d901      	bls.n	8000c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e19b      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f0      	beq.n	8000bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4927      	ldr	r1, [pc, #156]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
 8000c30:	e015      	b.n	8000c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_RCC_OscConfig+0x270>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fcc8 	bl	80005cc <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c40:	f7ff fcc4 	bl	80005cc <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e17a      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d03a      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d019      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_RCC_OscConfig+0x274>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c78:	f7ff fca8 	bl	80005cc <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c80:	f7ff fca4 	bl	80005cc <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e15a      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f000 fada 	bl	8001258 <RCC_Delay>
 8000ca4:	e01c      	b.n	8000ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_RCC_OscConfig+0x274>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cac:	f7ff fc8e 	bl	80005cc <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cb2:	e00f      	b.n	8000cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb4:	f7ff fc8a 	bl	80005cc <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d908      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e140      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	42420000 	.word	0x42420000
 8000cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd4:	4b9e      	ldr	r3, [pc, #632]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1e9      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80a6 	beq.w	8000e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf2:	4b97      	ldr	r3, [pc, #604]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10d      	bne.n	8000d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b94      	ldr	r3, [pc, #592]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a93      	ldr	r2, [pc, #588]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b91      	ldr	r3, [pc, #580]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d16:	2301      	movs	r3, #1
 8000d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1a:	4b8e      	ldr	r3, [pc, #568]	; (8000f54 <HAL_RCC_OscConfig+0x4f8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d118      	bne.n	8000d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d26:	4b8b      	ldr	r3, [pc, #556]	; (8000f54 <HAL_RCC_OscConfig+0x4f8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a8a      	ldr	r2, [pc, #552]	; (8000f54 <HAL_RCC_OscConfig+0x4f8>)
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d32:	f7ff fc4b 	bl	80005cc <HAL_GetTick>
 8000d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d3a:	f7ff fc47 	bl	80005cc <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b64      	cmp	r3, #100	; 0x64
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e0fd      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4c:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <HAL_RCC_OscConfig+0x4f8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d106      	bne.n	8000d6e <HAL_RCC_OscConfig+0x312>
 8000d60:	4b7b      	ldr	r3, [pc, #492]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	4a7a      	ldr	r2, [pc, #488]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6213      	str	r3, [r2, #32]
 8000d6c:	e02d      	b.n	8000dca <HAL_RCC_OscConfig+0x36e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x334>
 8000d76:	4b76      	ldr	r3, [pc, #472]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4a75      	ldr	r2, [pc, #468]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	f023 0301 	bic.w	r3, r3, #1
 8000d80:	6213      	str	r3, [r2, #32]
 8000d82:	4b73      	ldr	r3, [pc, #460]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4a72      	ldr	r2, [pc, #456]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d88:	f023 0304 	bic.w	r3, r3, #4
 8000d8c:	6213      	str	r3, [r2, #32]
 8000d8e:	e01c      	b.n	8000dca <HAL_RCC_OscConfig+0x36e>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d10c      	bne.n	8000db2 <HAL_RCC_OscConfig+0x356>
 8000d98:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	4a6c      	ldr	r2, [pc, #432]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6213      	str	r3, [r2, #32]
 8000da4:	4b6a      	ldr	r3, [pc, #424]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	4a69      	ldr	r2, [pc, #420]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6213      	str	r3, [r2, #32]
 8000db0:	e00b      	b.n	8000dca <HAL_RCC_OscConfig+0x36e>
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	4a66      	ldr	r2, [pc, #408]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	6213      	str	r3, [r2, #32]
 8000dbe:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	4a63      	ldr	r2, [pc, #396]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000dc4:	f023 0304 	bic.w	r3, r3, #4
 8000dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d015      	beq.n	8000dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fbfb 	bl	80005cc <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd8:	e00a      	b.n	8000df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dda:	f7ff fbf7 	bl	80005cc <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e0ab      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df0:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0ee      	beq.n	8000dda <HAL_RCC_OscConfig+0x37e>
 8000dfc:	e014      	b.n	8000e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfe:	f7ff fbe5 	bl	80005cc <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e04:	e00a      	b.n	8000e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e06:	f7ff fbe1 	bl	80005cc <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e095      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e1c:	4b4c      	ldr	r3, [pc, #304]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1ee      	bne.n	8000e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d105      	bne.n	8000e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2e:	4b48      	ldr	r3, [pc, #288]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a47      	ldr	r2, [pc, #284]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8081 	beq.w	8000f46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e44:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d061      	beq.n	8000f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d146      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e58:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_RCC_OscConfig+0x4fc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fbb5 	bl	80005cc <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e66:	f7ff fbb1 	bl	80005cc <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e067      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8c:	d108      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	492d      	ldr	r1, [pc, #180]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a19      	ldr	r1, [r3, #32]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	4927      	ldr	r1, [pc, #156]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_RCC_OscConfig+0x4fc>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fb85 	bl	80005cc <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec6:	f7ff fb81 	bl	80005cc <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e037      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x46a>
 8000ee4:	e02f      	b.n	8000f46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_RCC_OscConfig+0x4fc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fb6e 	bl	80005cc <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef4:	f7ff fb6a 	bl	80005cc <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e020      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x498>
 8000f12:	e018      	b.n	8000f46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e013      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d001      	beq.n	8000f46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40007000 	.word	0x40007000
 8000f58:	42420060 	.word	0x42420060

08000f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e0d0      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f70:	4b6a      	ldr	r3, [pc, #424]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d910      	bls.n	8000fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7e:	4b67      	ldr	r3, [pc, #412]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 0207 	bic.w	r2, r3, #7
 8000f86:	4965      	ldr	r1, [pc, #404]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8e:	4b63      	ldr	r3, [pc, #396]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e0b8      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d020      	beq.n	8000fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb8:	4b59      	ldr	r3, [pc, #356]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4a58      	ldr	r2, [pc, #352]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd0:	4b53      	ldr	r3, [pc, #332]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fdc:	4b50      	ldr	r3, [pc, #320]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	494d      	ldr	r1, [pc, #308]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d040      	beq.n	800107c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d107      	bne.n	8001012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d115      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e07f      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d107      	bne.n	800102a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e073      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e06b      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f023 0203 	bic.w	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4936      	ldr	r1, [pc, #216]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800104c:	f7ff fabe 	bl	80005cc <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001052:	e00a      	b.n	800106a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001054:	f7ff faba 	bl	80005cc <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001062:	4293      	cmp	r3, r2
 8001064:	d901      	bls.n	800106a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e053      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 020c 	and.w	r2, r3, #12
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	429a      	cmp	r2, r3
 800107a:	d1eb      	bne.n	8001054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d210      	bcs.n	80010ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 0207 	bic.w	r2, r3, #7
 8001092:	4922      	ldr	r1, [pc, #136]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e032      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4916      	ldr	r1, [pc, #88]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d009      	beq.n	80010ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	490e      	ldr	r1, [pc, #56]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ea:	f000 f821 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 80010ee:	4601      	mov	r1, r0
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_RCC_ClockConfig+0x1c8>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_RCC_ClockConfig+0x1cc>)
 8001104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_RCC_ClockConfig+0x1d0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa1c 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000
 8001120:	40021000 	.word	0x40021000
 8001124:	08002568 	.word	0x08002568
 8001128:	20000000 	.word	0x20000000
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001130:	b490      	push	{r4, r7}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001138:	1d3c      	adds	r4, r7, #4
 800113a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800113c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b04      	cmp	r3, #4
 8001168:	d002      	beq.n	8001170 <HAL_RCC_GetSysClockFreq+0x40>
 800116a:	2b08      	cmp	r3, #8
 800116c:	d003      	beq.n	8001176 <HAL_RCC_GetSysClockFreq+0x46>
 800116e:	e02d      	b.n	80011cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001172:	623b      	str	r3, [r7, #32]
      break;
 8001174:	e02d      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	0c9b      	lsrs	r3, r3, #18
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001182:	4413      	add	r3, r2
 8001184:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001188:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d013      	beq.n	80011bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	0c5b      	lsrs	r3, r3, #17
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011a2:	4413      	add	r3, r2
 80011a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80011ae:	fb02 f203 	mul.w	r2, r2, r3
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	e004      	b.n	80011c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	623b      	str	r3, [r7, #32]
      break;
 80011ca:	e002      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80011ce:	623b      	str	r3, [r7, #32]
      break;
 80011d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011d2:	6a3b      	ldr	r3, [r7, #32]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc90      	pop	{r4, r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	08002554 	.word	0x08002554
 80011e4:	08002564 	.word	0x08002564
 80011e8:	40021000 	.word	0x40021000
 80011ec:	007a1200 	.word	0x007a1200
 80011f0:	003d0900 	.word	0x003d0900

080011f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <HAL_RCC_GetHCLKFreq+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000000 	.word	0x20000000

08001208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800120c:	f7ff fff2 	bl	80011f4 <HAL_RCC_GetHCLKFreq>
 8001210:	4601      	mov	r1, r0
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_RCC_GetPCLK1Freq+0x24>)
 800121e:	5cd3      	ldrb	r3, [r2, r3]
 8001220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	08002578 	.word	0x08002578

08001230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001234:	f7ff ffde 	bl	80011f4 <HAL_RCC_GetHCLKFreq>
 8001238:	4601      	mov	r1, r0
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	0adb      	lsrs	r3, r3, #11
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	4a03      	ldr	r2, [pc, #12]	; (8001254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001246:	5cd3      	ldrb	r3, [r2, r3]
 8001248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	08002578 	.word	0x08002578

08001258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <RCC_Delay+0x34>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <RCC_Delay+0x38>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001274:	bf00      	nop
  }
  while (Delay --);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	60fa      	str	r2, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f9      	bne.n	8001274 <RCC_Delay+0x1c>
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000000 	.word	0x20000000
 8001290:	10624dd3 	.word	0x10624dd3

08001294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e03f      	b.n	8001326 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f858 	bl	8000370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2224      	movs	r2, #36	; 0x24
 80012c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f911 	bl	8001500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800130c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2220      	movs	r2, #32
 8001318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2220      	movs	r2, #32
 8001320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b08a      	sub	sp, #40	; 0x28
 8001332:	af02      	add	r7, sp, #8
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	f040 8089 	bne.w	8001462 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_UART_Receive+0x2e>
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e081      	b.n	8001464 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_UART_Receive+0x40>
 800136a:	2302      	movs	r3, #2
 800136c:	e07a      	b.n	8001464 <HAL_UART_Receive+0x136>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2222      	movs	r2, #34	; 0x22
 8001380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001384:	f7ff f922 	bl	80005cc <HAL_GetTick>
 8001388:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139e:	d108      	bne.n	80013b2 <HAL_UART_Receive+0x84>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d104      	bne.n	80013b2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	e003      	b.n	80013ba <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80013c2:	e043      	b.n	800144c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f84c 	bl	800146c <UART_WaitOnFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e042      	b.n	8001464 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10c      	bne.n	80013fe <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	3302      	adds	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	e01f      	b.n	800143e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001406:	d007      	beq.n	8001418 <HAL_UART_Receive+0xea>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10a      	bne.n	8001426 <HAL_UART_Receive+0xf8>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e008      	b.n	8001438 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3301      	adds	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001450:	b29b      	uxth	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1b6      	bne.n	80013c4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001462:	2302      	movs	r3, #2
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800147c:	e02c      	b.n	80014d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d028      	beq.n	80014d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <UART_WaitOnFlagUntilTimeout+0x30>
 800148c:	f7ff f89e 	bl	80005cc <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	429a      	cmp	r2, r3
 800149a:	d21d      	bcs.n	80014d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e00f      	b.n	80014f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	4013      	ands	r3, r2
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d0c3      	beq.n	800147e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800153a:	f023 030c 	bic.w	r3, r3, #12
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	430b      	orrs	r3, r1
 8001546:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <UART_SetConfig+0x114>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d103      	bne.n	8001570 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001568:	f7ff fe62 	bl	8001230 <HAL_RCC_GetPCLK2Freq>
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	e002      	b.n	8001576 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001570:	f7ff fe4a 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001574:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	009a      	lsls	r2, r3, #2
 8001580:	441a      	add	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fbb2 f3f3 	udiv	r3, r2, r3
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <UART_SetConfig+0x118>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	0119      	lsls	r1, r3, #4
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009a      	lsls	r2, r3, #2
 80015a0:	441a      	add	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <UART_SetConfig+0x118>)
 80015ae:	fba3 0302 	umull	r0, r3, r3, r2
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2064      	movs	r0, #100	; 0x64
 80015b6:	fb00 f303 	mul.w	r3, r0, r3
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	3332      	adds	r3, #50	; 0x32
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <UART_SetConfig+0x118>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015cc:	4419      	add	r1, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	009a      	lsls	r2, r3, #2
 80015d8:	441a      	add	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <UART_SetConfig+0x118>)
 80015e6:	fba3 0302 	umull	r0, r3, r3, r2
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2064      	movs	r0, #100	; 0x64
 80015ee:	fb00 f303 	mul.w	r3, r0, r3
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	3332      	adds	r3, #50	; 0x32
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <UART_SetConfig+0x118>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	f003 020f 	and.w	r2, r3, #15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	440a      	add	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40013800 	.word	0x40013800
 8001618:	51eb851f 	.word	0x51eb851f

0800161c <__errno>:
 800161c:	4b01      	ldr	r3, [pc, #4]	; (8001624 <__errno+0x8>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000000c 	.word	0x2000000c

08001628 <__libc_init_array>:
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	2500      	movs	r5, #0
 800162c:	4e0c      	ldr	r6, [pc, #48]	; (8001660 <__libc_init_array+0x38>)
 800162e:	4c0d      	ldr	r4, [pc, #52]	; (8001664 <__libc_init_array+0x3c>)
 8001630:	1ba4      	subs	r4, r4, r6
 8001632:	10a4      	asrs	r4, r4, #2
 8001634:	42a5      	cmp	r5, r4
 8001636:	d109      	bne.n	800164c <__libc_init_array+0x24>
 8001638:	f000 ff78 	bl	800252c <_init>
 800163c:	2500      	movs	r5, #0
 800163e:	4e0a      	ldr	r6, [pc, #40]	; (8001668 <__libc_init_array+0x40>)
 8001640:	4c0a      	ldr	r4, [pc, #40]	; (800166c <__libc_init_array+0x44>)
 8001642:	1ba4      	subs	r4, r4, r6
 8001644:	10a4      	asrs	r4, r4, #2
 8001646:	42a5      	cmp	r5, r4
 8001648:	d105      	bne.n	8001656 <__libc_init_array+0x2e>
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001650:	4798      	blx	r3
 8001652:	3501      	adds	r5, #1
 8001654:	e7ee      	b.n	8001634 <__libc_init_array+0xc>
 8001656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800165a:	4798      	blx	r3
 800165c:	3501      	adds	r5, #1
 800165e:	e7f2      	b.n	8001646 <__libc_init_array+0x1e>
 8001660:	08002600 	.word	0x08002600
 8001664:	08002600 	.word	0x08002600
 8001668:	08002600 	.word	0x08002600
 800166c:	08002604 	.word	0x08002604

08001670 <memset>:
 8001670:	4603      	mov	r3, r0
 8001672:	4402      	add	r2, r0
 8001674:	4293      	cmp	r3, r2
 8001676:	d100      	bne.n	800167a <memset+0xa>
 8001678:	4770      	bx	lr
 800167a:	f803 1b01 	strb.w	r1, [r3], #1
 800167e:	e7f9      	b.n	8001674 <memset+0x4>

08001680 <putchar>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <putchar+0x24>)
 8001684:	4605      	mov	r5, r0
 8001686:	681c      	ldr	r4, [r3, #0]
 8001688:	b124      	cbz	r4, 8001694 <putchar+0x14>
 800168a:	69a3      	ldr	r3, [r4, #24]
 800168c:	b913      	cbnz	r3, 8001694 <putchar+0x14>
 800168e:	4620      	mov	r0, r4
 8001690:	f000 fa1e 	bl	8001ad0 <__sinit>
 8001694:	68a2      	ldr	r2, [r4, #8]
 8001696:	4629      	mov	r1, r5
 8001698:	4620      	mov	r0, r4
 800169a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800169e:	f000 bbab 	b.w	8001df8 <_putc_r>
 80016a2:	bf00      	nop
 80016a4:	2000000c 	.word	0x2000000c

080016a8 <_puts_r>:
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	460e      	mov	r6, r1
 80016ac:	4605      	mov	r5, r0
 80016ae:	b118      	cbz	r0, 80016b8 <_puts_r+0x10>
 80016b0:	6983      	ldr	r3, [r0, #24]
 80016b2:	b90b      	cbnz	r3, 80016b8 <_puts_r+0x10>
 80016b4:	f000 fa0c 	bl	8001ad0 <__sinit>
 80016b8:	69ab      	ldr	r3, [r5, #24]
 80016ba:	68ac      	ldr	r4, [r5, #8]
 80016bc:	b913      	cbnz	r3, 80016c4 <_puts_r+0x1c>
 80016be:	4628      	mov	r0, r5
 80016c0:	f000 fa06 	bl	8001ad0 <__sinit>
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <_puts_r+0xac>)
 80016c6:	429c      	cmp	r4, r3
 80016c8:	d117      	bne.n	80016fa <_puts_r+0x52>
 80016ca:	686c      	ldr	r4, [r5, #4]
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	071b      	lsls	r3, r3, #28
 80016d0:	d51d      	bpl.n	800170e <_puts_r+0x66>
 80016d2:	6923      	ldr	r3, [r4, #16]
 80016d4:	b1db      	cbz	r3, 800170e <_puts_r+0x66>
 80016d6:	3e01      	subs	r6, #1
 80016d8:	68a3      	ldr	r3, [r4, #8]
 80016da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80016de:	3b01      	subs	r3, #1
 80016e0:	60a3      	str	r3, [r4, #8]
 80016e2:	b9e9      	cbnz	r1, 8001720 <_puts_r+0x78>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da2e      	bge.n	8001746 <_puts_r+0x9e>
 80016e8:	4622      	mov	r2, r4
 80016ea:	210a      	movs	r1, #10
 80016ec:	4628      	mov	r0, r5
 80016ee:	f000 f83f 	bl	8001770 <__swbuf_r>
 80016f2:	3001      	adds	r0, #1
 80016f4:	d011      	beq.n	800171a <_puts_r+0x72>
 80016f6:	200a      	movs	r0, #10
 80016f8:	e011      	b.n	800171e <_puts_r+0x76>
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <_puts_r+0xb0>)
 80016fc:	429c      	cmp	r4, r3
 80016fe:	d101      	bne.n	8001704 <_puts_r+0x5c>
 8001700:	68ac      	ldr	r4, [r5, #8]
 8001702:	e7e3      	b.n	80016cc <_puts_r+0x24>
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <_puts_r+0xb4>)
 8001706:	429c      	cmp	r4, r3
 8001708:	bf08      	it	eq
 800170a:	68ec      	ldreq	r4, [r5, #12]
 800170c:	e7de      	b.n	80016cc <_puts_r+0x24>
 800170e:	4621      	mov	r1, r4
 8001710:	4628      	mov	r0, r5
 8001712:	f000 f87f 	bl	8001814 <__swsetup_r>
 8001716:	2800      	cmp	r0, #0
 8001718:	d0dd      	beq.n	80016d6 <_puts_r+0x2e>
 800171a:	f04f 30ff 	mov.w	r0, #4294967295
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	2b00      	cmp	r3, #0
 8001722:	da04      	bge.n	800172e <_puts_r+0x86>
 8001724:	69a2      	ldr	r2, [r4, #24]
 8001726:	429a      	cmp	r2, r3
 8001728:	dc06      	bgt.n	8001738 <_puts_r+0x90>
 800172a:	290a      	cmp	r1, #10
 800172c:	d004      	beq.n	8001738 <_puts_r+0x90>
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	6022      	str	r2, [r4, #0]
 8001734:	7019      	strb	r1, [r3, #0]
 8001736:	e7cf      	b.n	80016d8 <_puts_r+0x30>
 8001738:	4622      	mov	r2, r4
 800173a:	4628      	mov	r0, r5
 800173c:	f000 f818 	bl	8001770 <__swbuf_r>
 8001740:	3001      	adds	r0, #1
 8001742:	d1c9      	bne.n	80016d8 <_puts_r+0x30>
 8001744:	e7e9      	b.n	800171a <_puts_r+0x72>
 8001746:	200a      	movs	r0, #10
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	6022      	str	r2, [r4, #0]
 800174e:	7018      	strb	r0, [r3, #0]
 8001750:	e7e5      	b.n	800171e <_puts_r+0x76>
 8001752:	bf00      	nop
 8001754:	080025a4 	.word	0x080025a4
 8001758:	080025c4 	.word	0x080025c4
 800175c:	08002584 	.word	0x08002584

08001760 <puts>:
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <puts+0xc>)
 8001762:	4601      	mov	r1, r0
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	f7ff bf9f 	b.w	80016a8 <_puts_r>
 800176a:	bf00      	nop
 800176c:	2000000c 	.word	0x2000000c

08001770 <__swbuf_r>:
 8001770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001772:	460e      	mov	r6, r1
 8001774:	4614      	mov	r4, r2
 8001776:	4605      	mov	r5, r0
 8001778:	b118      	cbz	r0, 8001782 <__swbuf_r+0x12>
 800177a:	6983      	ldr	r3, [r0, #24]
 800177c:	b90b      	cbnz	r3, 8001782 <__swbuf_r+0x12>
 800177e:	f000 f9a7 	bl	8001ad0 <__sinit>
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <__swbuf_r+0x98>)
 8001784:	429c      	cmp	r4, r3
 8001786:	d12a      	bne.n	80017de <__swbuf_r+0x6e>
 8001788:	686c      	ldr	r4, [r5, #4]
 800178a:	69a3      	ldr	r3, [r4, #24]
 800178c:	60a3      	str	r3, [r4, #8]
 800178e:	89a3      	ldrh	r3, [r4, #12]
 8001790:	071a      	lsls	r2, r3, #28
 8001792:	d52e      	bpl.n	80017f2 <__swbuf_r+0x82>
 8001794:	6923      	ldr	r3, [r4, #16]
 8001796:	b363      	cbz	r3, 80017f2 <__swbuf_r+0x82>
 8001798:	6923      	ldr	r3, [r4, #16]
 800179a:	6820      	ldr	r0, [r4, #0]
 800179c:	b2f6      	uxtb	r6, r6
 800179e:	1ac0      	subs	r0, r0, r3
 80017a0:	6963      	ldr	r3, [r4, #20]
 80017a2:	4637      	mov	r7, r6
 80017a4:	4283      	cmp	r3, r0
 80017a6:	dc04      	bgt.n	80017b2 <__swbuf_r+0x42>
 80017a8:	4621      	mov	r1, r4
 80017aa:	4628      	mov	r0, r5
 80017ac:	f000 f926 	bl	80019fc <_fflush_r>
 80017b0:	bb28      	cbnz	r0, 80017fe <__swbuf_r+0x8e>
 80017b2:	68a3      	ldr	r3, [r4, #8]
 80017b4:	3001      	adds	r0, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	60a3      	str	r3, [r4, #8]
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	6022      	str	r2, [r4, #0]
 80017c0:	701e      	strb	r6, [r3, #0]
 80017c2:	6963      	ldr	r3, [r4, #20]
 80017c4:	4283      	cmp	r3, r0
 80017c6:	d004      	beq.n	80017d2 <__swbuf_r+0x62>
 80017c8:	89a3      	ldrh	r3, [r4, #12]
 80017ca:	07db      	lsls	r3, r3, #31
 80017cc:	d519      	bpl.n	8001802 <__swbuf_r+0x92>
 80017ce:	2e0a      	cmp	r6, #10
 80017d0:	d117      	bne.n	8001802 <__swbuf_r+0x92>
 80017d2:	4621      	mov	r1, r4
 80017d4:	4628      	mov	r0, r5
 80017d6:	f000 f911 	bl	80019fc <_fflush_r>
 80017da:	b190      	cbz	r0, 8001802 <__swbuf_r+0x92>
 80017dc:	e00f      	b.n	80017fe <__swbuf_r+0x8e>
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <__swbuf_r+0x9c>)
 80017e0:	429c      	cmp	r4, r3
 80017e2:	d101      	bne.n	80017e8 <__swbuf_r+0x78>
 80017e4:	68ac      	ldr	r4, [r5, #8]
 80017e6:	e7d0      	b.n	800178a <__swbuf_r+0x1a>
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <__swbuf_r+0xa0>)
 80017ea:	429c      	cmp	r4, r3
 80017ec:	bf08      	it	eq
 80017ee:	68ec      	ldreq	r4, [r5, #12]
 80017f0:	e7cb      	b.n	800178a <__swbuf_r+0x1a>
 80017f2:	4621      	mov	r1, r4
 80017f4:	4628      	mov	r0, r5
 80017f6:	f000 f80d 	bl	8001814 <__swsetup_r>
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d0cc      	beq.n	8001798 <__swbuf_r+0x28>
 80017fe:	f04f 37ff 	mov.w	r7, #4294967295
 8001802:	4638      	mov	r0, r7
 8001804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001806:	bf00      	nop
 8001808:	080025a4 	.word	0x080025a4
 800180c:	080025c4 	.word	0x080025c4
 8001810:	08002584 	.word	0x08002584

08001814 <__swsetup_r>:
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <__swsetup_r+0xcc>)
 8001816:	b570      	push	{r4, r5, r6, lr}
 8001818:	681d      	ldr	r5, [r3, #0]
 800181a:	4606      	mov	r6, r0
 800181c:	460c      	mov	r4, r1
 800181e:	b125      	cbz	r5, 800182a <__swsetup_r+0x16>
 8001820:	69ab      	ldr	r3, [r5, #24]
 8001822:	b913      	cbnz	r3, 800182a <__swsetup_r+0x16>
 8001824:	4628      	mov	r0, r5
 8001826:	f000 f953 	bl	8001ad0 <__sinit>
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <__swsetup_r+0xd0>)
 800182c:	429c      	cmp	r4, r3
 800182e:	d10f      	bne.n	8001850 <__swsetup_r+0x3c>
 8001830:	686c      	ldr	r4, [r5, #4]
 8001832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001836:	b29a      	uxth	r2, r3
 8001838:	0715      	lsls	r5, r2, #28
 800183a:	d42c      	bmi.n	8001896 <__swsetup_r+0x82>
 800183c:	06d0      	lsls	r0, r2, #27
 800183e:	d411      	bmi.n	8001864 <__swsetup_r+0x50>
 8001840:	2209      	movs	r2, #9
 8001842:	6032      	str	r2, [r6, #0]
 8001844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001848:	81a3      	strh	r3, [r4, #12]
 800184a:	f04f 30ff 	mov.w	r0, #4294967295
 800184e:	e03e      	b.n	80018ce <__swsetup_r+0xba>
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <__swsetup_r+0xd4>)
 8001852:	429c      	cmp	r4, r3
 8001854:	d101      	bne.n	800185a <__swsetup_r+0x46>
 8001856:	68ac      	ldr	r4, [r5, #8]
 8001858:	e7eb      	b.n	8001832 <__swsetup_r+0x1e>
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <__swsetup_r+0xd8>)
 800185c:	429c      	cmp	r4, r3
 800185e:	bf08      	it	eq
 8001860:	68ec      	ldreq	r4, [r5, #12]
 8001862:	e7e6      	b.n	8001832 <__swsetup_r+0x1e>
 8001864:	0751      	lsls	r1, r2, #29
 8001866:	d512      	bpl.n	800188e <__swsetup_r+0x7a>
 8001868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800186a:	b141      	cbz	r1, 800187e <__swsetup_r+0x6a>
 800186c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001870:	4299      	cmp	r1, r3
 8001872:	d002      	beq.n	800187a <__swsetup_r+0x66>
 8001874:	4630      	mov	r0, r6
 8001876:	f000 fa19 	bl	8001cac <_free_r>
 800187a:	2300      	movs	r3, #0
 800187c:	6363      	str	r3, [r4, #52]	; 0x34
 800187e:	89a3      	ldrh	r3, [r4, #12]
 8001880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001884:	81a3      	strh	r3, [r4, #12]
 8001886:	2300      	movs	r3, #0
 8001888:	6063      	str	r3, [r4, #4]
 800188a:	6923      	ldr	r3, [r4, #16]
 800188c:	6023      	str	r3, [r4, #0]
 800188e:	89a3      	ldrh	r3, [r4, #12]
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	81a3      	strh	r3, [r4, #12]
 8001896:	6923      	ldr	r3, [r4, #16]
 8001898:	b94b      	cbnz	r3, 80018ae <__swsetup_r+0x9a>
 800189a:	89a3      	ldrh	r3, [r4, #12]
 800189c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80018a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a4:	d003      	beq.n	80018ae <__swsetup_r+0x9a>
 80018a6:	4621      	mov	r1, r4
 80018a8:	4630      	mov	r0, r6
 80018aa:	f000 f9bf 	bl	8001c2c <__smakebuf_r>
 80018ae:	89a2      	ldrh	r2, [r4, #12]
 80018b0:	f012 0301 	ands.w	r3, r2, #1
 80018b4:	d00c      	beq.n	80018d0 <__swsetup_r+0xbc>
 80018b6:	2300      	movs	r3, #0
 80018b8:	60a3      	str	r3, [r4, #8]
 80018ba:	6963      	ldr	r3, [r4, #20]
 80018bc:	425b      	negs	r3, r3
 80018be:	61a3      	str	r3, [r4, #24]
 80018c0:	6923      	ldr	r3, [r4, #16]
 80018c2:	b953      	cbnz	r3, 80018da <__swsetup_r+0xc6>
 80018c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80018cc:	d1ba      	bne.n	8001844 <__swsetup_r+0x30>
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	0792      	lsls	r2, r2, #30
 80018d2:	bf58      	it	pl
 80018d4:	6963      	ldrpl	r3, [r4, #20]
 80018d6:	60a3      	str	r3, [r4, #8]
 80018d8:	e7f2      	b.n	80018c0 <__swsetup_r+0xac>
 80018da:	2000      	movs	r0, #0
 80018dc:	e7f7      	b.n	80018ce <__swsetup_r+0xba>
 80018de:	bf00      	nop
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	080025a4 	.word	0x080025a4
 80018e8:	080025c4 	.word	0x080025c4
 80018ec:	08002584 	.word	0x08002584

080018f0 <__sflush_r>:
 80018f0:	898a      	ldrh	r2, [r1, #12]
 80018f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f6:	4605      	mov	r5, r0
 80018f8:	0710      	lsls	r0, r2, #28
 80018fa:	460c      	mov	r4, r1
 80018fc:	d458      	bmi.n	80019b0 <__sflush_r+0xc0>
 80018fe:	684b      	ldr	r3, [r1, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	dc05      	bgt.n	8001910 <__sflush_r+0x20>
 8001904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	dc02      	bgt.n	8001910 <__sflush_r+0x20>
 800190a:	2000      	movs	r0, #0
 800190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001912:	2e00      	cmp	r6, #0
 8001914:	d0f9      	beq.n	800190a <__sflush_r+0x1a>
 8001916:	2300      	movs	r3, #0
 8001918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800191c:	682f      	ldr	r7, [r5, #0]
 800191e:	6a21      	ldr	r1, [r4, #32]
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	d032      	beq.n	800198a <__sflush_r+0x9a>
 8001924:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001926:	89a3      	ldrh	r3, [r4, #12]
 8001928:	075a      	lsls	r2, r3, #29
 800192a:	d505      	bpl.n	8001938 <__sflush_r+0x48>
 800192c:	6863      	ldr	r3, [r4, #4]
 800192e:	1ac0      	subs	r0, r0, r3
 8001930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001932:	b10b      	cbz	r3, 8001938 <__sflush_r+0x48>
 8001934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001936:	1ac0      	subs	r0, r0, r3
 8001938:	2300      	movs	r3, #0
 800193a:	4602      	mov	r2, r0
 800193c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800193e:	6a21      	ldr	r1, [r4, #32]
 8001940:	4628      	mov	r0, r5
 8001942:	47b0      	blx	r6
 8001944:	1c43      	adds	r3, r0, #1
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	d106      	bne.n	8001958 <__sflush_r+0x68>
 800194a:	6829      	ldr	r1, [r5, #0]
 800194c:	291d      	cmp	r1, #29
 800194e:	d848      	bhi.n	80019e2 <__sflush_r+0xf2>
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <__sflush_r+0x108>)
 8001952:	40ca      	lsrs	r2, r1
 8001954:	07d6      	lsls	r6, r2, #31
 8001956:	d544      	bpl.n	80019e2 <__sflush_r+0xf2>
 8001958:	2200      	movs	r2, #0
 800195a:	6062      	str	r2, [r4, #4]
 800195c:	6922      	ldr	r2, [r4, #16]
 800195e:	04d9      	lsls	r1, r3, #19
 8001960:	6022      	str	r2, [r4, #0]
 8001962:	d504      	bpl.n	800196e <__sflush_r+0x7e>
 8001964:	1c42      	adds	r2, r0, #1
 8001966:	d101      	bne.n	800196c <__sflush_r+0x7c>
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	b903      	cbnz	r3, 800196e <__sflush_r+0x7e>
 800196c:	6560      	str	r0, [r4, #84]	; 0x54
 800196e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001970:	602f      	str	r7, [r5, #0]
 8001972:	2900      	cmp	r1, #0
 8001974:	d0c9      	beq.n	800190a <__sflush_r+0x1a>
 8001976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800197a:	4299      	cmp	r1, r3
 800197c:	d002      	beq.n	8001984 <__sflush_r+0x94>
 800197e:	4628      	mov	r0, r5
 8001980:	f000 f994 	bl	8001cac <_free_r>
 8001984:	2000      	movs	r0, #0
 8001986:	6360      	str	r0, [r4, #52]	; 0x34
 8001988:	e7c0      	b.n	800190c <__sflush_r+0x1c>
 800198a:	2301      	movs	r3, #1
 800198c:	4628      	mov	r0, r5
 800198e:	47b0      	blx	r6
 8001990:	1c41      	adds	r1, r0, #1
 8001992:	d1c8      	bne.n	8001926 <__sflush_r+0x36>
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0c5      	beq.n	8001926 <__sflush_r+0x36>
 800199a:	2b1d      	cmp	r3, #29
 800199c:	d001      	beq.n	80019a2 <__sflush_r+0xb2>
 800199e:	2b16      	cmp	r3, #22
 80019a0:	d101      	bne.n	80019a6 <__sflush_r+0xb6>
 80019a2:	602f      	str	r7, [r5, #0]
 80019a4:	e7b1      	b.n	800190a <__sflush_r+0x1a>
 80019a6:	89a3      	ldrh	r3, [r4, #12]
 80019a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	e7ad      	b.n	800190c <__sflush_r+0x1c>
 80019b0:	690f      	ldr	r7, [r1, #16]
 80019b2:	2f00      	cmp	r7, #0
 80019b4:	d0a9      	beq.n	800190a <__sflush_r+0x1a>
 80019b6:	0793      	lsls	r3, r2, #30
 80019b8:	bf18      	it	ne
 80019ba:	2300      	movne	r3, #0
 80019bc:	680e      	ldr	r6, [r1, #0]
 80019be:	bf08      	it	eq
 80019c0:	694b      	ldreq	r3, [r1, #20]
 80019c2:	eba6 0807 	sub.w	r8, r6, r7
 80019c6:	600f      	str	r7, [r1, #0]
 80019c8:	608b      	str	r3, [r1, #8]
 80019ca:	f1b8 0f00 	cmp.w	r8, #0
 80019ce:	dd9c      	ble.n	800190a <__sflush_r+0x1a>
 80019d0:	4643      	mov	r3, r8
 80019d2:	463a      	mov	r2, r7
 80019d4:	6a21      	ldr	r1, [r4, #32]
 80019d6:	4628      	mov	r0, r5
 80019d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019da:	47b0      	blx	r6
 80019dc:	2800      	cmp	r0, #0
 80019de:	dc06      	bgt.n	80019ee <__sflush_r+0xfe>
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e6:	81a3      	strh	r3, [r4, #12]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	e78e      	b.n	800190c <__sflush_r+0x1c>
 80019ee:	4407      	add	r7, r0
 80019f0:	eba8 0800 	sub.w	r8, r8, r0
 80019f4:	e7e9      	b.n	80019ca <__sflush_r+0xda>
 80019f6:	bf00      	nop
 80019f8:	20400001 	.word	0x20400001

080019fc <_fflush_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	690b      	ldr	r3, [r1, #16]
 8001a00:	4605      	mov	r5, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	b1db      	cbz	r3, 8001a3e <_fflush_r+0x42>
 8001a06:	b118      	cbz	r0, 8001a10 <_fflush_r+0x14>
 8001a08:	6983      	ldr	r3, [r0, #24]
 8001a0a:	b90b      	cbnz	r3, 8001a10 <_fflush_r+0x14>
 8001a0c:	f000 f860 	bl	8001ad0 <__sinit>
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <_fflush_r+0x48>)
 8001a12:	429c      	cmp	r4, r3
 8001a14:	d109      	bne.n	8001a2a <_fflush_r+0x2e>
 8001a16:	686c      	ldr	r4, [r5, #4]
 8001a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a1c:	b17b      	cbz	r3, 8001a3e <_fflush_r+0x42>
 8001a1e:	4621      	mov	r1, r4
 8001a20:	4628      	mov	r0, r5
 8001a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a26:	f7ff bf63 	b.w	80018f0 <__sflush_r>
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_fflush_r+0x4c>)
 8001a2c:	429c      	cmp	r4, r3
 8001a2e:	d101      	bne.n	8001a34 <_fflush_r+0x38>
 8001a30:	68ac      	ldr	r4, [r5, #8]
 8001a32:	e7f1      	b.n	8001a18 <_fflush_r+0x1c>
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <_fflush_r+0x50>)
 8001a36:	429c      	cmp	r4, r3
 8001a38:	bf08      	it	eq
 8001a3a:	68ec      	ldreq	r4, [r5, #12]
 8001a3c:	e7ec      	b.n	8001a18 <_fflush_r+0x1c>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	bd38      	pop	{r3, r4, r5, pc}
 8001a42:	bf00      	nop
 8001a44:	080025a4 	.word	0x080025a4
 8001a48:	080025c4 	.word	0x080025c4
 8001a4c:	08002584 	.word	0x08002584

08001a50 <std>:
 8001a50:	2300      	movs	r3, #0
 8001a52:	b510      	push	{r4, lr}
 8001a54:	4604      	mov	r4, r0
 8001a56:	e9c0 3300 	strd	r3, r3, [r0]
 8001a5a:	6083      	str	r3, [r0, #8]
 8001a5c:	8181      	strh	r1, [r0, #12]
 8001a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8001a60:	81c2      	strh	r2, [r0, #14]
 8001a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a66:	6183      	str	r3, [r0, #24]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	305c      	adds	r0, #92	; 0x5c
 8001a6e:	f7ff fdff 	bl	8001670 <memset>
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <std+0x38>)
 8001a74:	6224      	str	r4, [r4, #32]
 8001a76:	6263      	str	r3, [r4, #36]	; 0x24
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <std+0x3c>)
 8001a7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <std+0x40>)
 8001a7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <std+0x44>)
 8001a82:	6323      	str	r3, [r4, #48]	; 0x30
 8001a84:	bd10      	pop	{r4, pc}
 8001a86:	bf00      	nop
 8001a88:	08001e85 	.word	0x08001e85
 8001a8c:	08001ea7 	.word	0x08001ea7
 8001a90:	08001edf 	.word	0x08001edf
 8001a94:	08001f03 	.word	0x08001f03

08001a98 <_cleanup_r>:
 8001a98:	4901      	ldr	r1, [pc, #4]	; (8001aa0 <_cleanup_r+0x8>)
 8001a9a:	f000 b885 	b.w	8001ba8 <_fwalk_reent>
 8001a9e:	bf00      	nop
 8001aa0:	080019fd 	.word	0x080019fd

08001aa4 <__sfmoreglue>:
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	2568      	movs	r5, #104	; 0x68
 8001aa8:	1e4a      	subs	r2, r1, #1
 8001aaa:	4355      	muls	r5, r2
 8001aac:	460e      	mov	r6, r1
 8001aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ab2:	f000 f947 	bl	8001d44 <_malloc_r>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	b140      	cbz	r0, 8001acc <__sfmoreglue+0x28>
 8001aba:	2100      	movs	r1, #0
 8001abc:	e9c0 1600 	strd	r1, r6, [r0]
 8001ac0:	300c      	adds	r0, #12
 8001ac2:	60a0      	str	r0, [r4, #8]
 8001ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ac8:	f7ff fdd2 	bl	8001670 <memset>
 8001acc:	4620      	mov	r0, r4
 8001ace:	bd70      	pop	{r4, r5, r6, pc}

08001ad0 <__sinit>:
 8001ad0:	6983      	ldr	r3, [r0, #24]
 8001ad2:	b510      	push	{r4, lr}
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	bb33      	cbnz	r3, 8001b26 <__sinit+0x56>
 8001ad8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001adc:	6503      	str	r3, [r0, #80]	; 0x50
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <__sinit+0x58>)
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <__sinit+0x5c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6282      	str	r2, [r0, #40]	; 0x28
 8001ae6:	4298      	cmp	r0, r3
 8001ae8:	bf04      	itt	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	6183      	streq	r3, [r0, #24]
 8001aee:	f000 f81f 	bl	8001b30 <__sfp>
 8001af2:	6060      	str	r0, [r4, #4]
 8001af4:	4620      	mov	r0, r4
 8001af6:	f000 f81b 	bl	8001b30 <__sfp>
 8001afa:	60a0      	str	r0, [r4, #8]
 8001afc:	4620      	mov	r0, r4
 8001afe:	f000 f817 	bl	8001b30 <__sfp>
 8001b02:	2200      	movs	r2, #0
 8001b04:	60e0      	str	r0, [r4, #12]
 8001b06:	2104      	movs	r1, #4
 8001b08:	6860      	ldr	r0, [r4, #4]
 8001b0a:	f7ff ffa1 	bl	8001a50 <std>
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2109      	movs	r1, #9
 8001b12:	68a0      	ldr	r0, [r4, #8]
 8001b14:	f7ff ff9c 	bl	8001a50 <std>
 8001b18:	2202      	movs	r2, #2
 8001b1a:	2112      	movs	r1, #18
 8001b1c:	68e0      	ldr	r0, [r4, #12]
 8001b1e:	f7ff ff97 	bl	8001a50 <std>
 8001b22:	2301      	movs	r3, #1
 8001b24:	61a3      	str	r3, [r4, #24]
 8001b26:	bd10      	pop	{r4, pc}
 8001b28:	08002580 	.word	0x08002580
 8001b2c:	08001a99 	.word	0x08001a99

08001b30 <__sfp>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <__sfp+0x70>)
 8001b34:	4607      	mov	r7, r0
 8001b36:	681e      	ldr	r6, [r3, #0]
 8001b38:	69b3      	ldr	r3, [r6, #24]
 8001b3a:	b913      	cbnz	r3, 8001b42 <__sfp+0x12>
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f7ff ffc7 	bl	8001ad0 <__sinit>
 8001b42:	3648      	adds	r6, #72	; 0x48
 8001b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	d503      	bpl.n	8001b54 <__sfp+0x24>
 8001b4c:	6833      	ldr	r3, [r6, #0]
 8001b4e:	b133      	cbz	r3, 8001b5e <__sfp+0x2e>
 8001b50:	6836      	ldr	r6, [r6, #0]
 8001b52:	e7f7      	b.n	8001b44 <__sfp+0x14>
 8001b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b58:	b16d      	cbz	r5, 8001b76 <__sfp+0x46>
 8001b5a:	3468      	adds	r4, #104	; 0x68
 8001b5c:	e7f4      	b.n	8001b48 <__sfp+0x18>
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4638      	mov	r0, r7
 8001b62:	f7ff ff9f 	bl	8001aa4 <__sfmoreglue>
 8001b66:	6030      	str	r0, [r6, #0]
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d1f1      	bne.n	8001b50 <__sfp+0x20>
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	4604      	mov	r4, r0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4620      	mov	r0, r4
 8001b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <__sfp+0x74>)
 8001b78:	6665      	str	r5, [r4, #100]	; 0x64
 8001b7a:	e9c4 5500 	strd	r5, r5, [r4]
 8001b7e:	60a5      	str	r5, [r4, #8]
 8001b80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001b84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001b88:	2208      	movs	r2, #8
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b90:	f7ff fd6e 	bl	8001670 <memset>
 8001b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b9c:	e7e9      	b.n	8001b72 <__sfp+0x42>
 8001b9e:	bf00      	nop
 8001ba0:	08002580 	.word	0x08002580
 8001ba4:	ffff0001 	.word	0xffff0001

08001ba8 <_fwalk_reent>:
 8001ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bac:	4680      	mov	r8, r0
 8001bae:	4689      	mov	r9, r1
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001bb6:	b914      	cbnz	r4, 8001bbe <_fwalk_reent+0x16>
 8001bb8:	4630      	mov	r0, r6
 8001bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001bc2:	3f01      	subs	r7, #1
 8001bc4:	d501      	bpl.n	8001bca <_fwalk_reent+0x22>
 8001bc6:	6824      	ldr	r4, [r4, #0]
 8001bc8:	e7f5      	b.n	8001bb6 <_fwalk_reent+0xe>
 8001bca:	89ab      	ldrh	r3, [r5, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d907      	bls.n	8001be0 <_fwalk_reent+0x38>
 8001bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	d003      	beq.n	8001be0 <_fwalk_reent+0x38>
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4640      	mov	r0, r8
 8001bdc:	47c8      	blx	r9
 8001bde:	4306      	orrs	r6, r0
 8001be0:	3568      	adds	r5, #104	; 0x68
 8001be2:	e7ee      	b.n	8001bc2 <_fwalk_reent+0x1a>

08001be4 <__swhatbuf_r>:
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	460e      	mov	r6, r1
 8001be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bec:	b096      	sub	sp, #88	; 0x58
 8001bee:	2900      	cmp	r1, #0
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	da07      	bge.n	8001c06 <__swhatbuf_r+0x22>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	602b      	str	r3, [r5, #0]
 8001bfa:	89b3      	ldrh	r3, [r6, #12]
 8001bfc:	061a      	lsls	r2, r3, #24
 8001bfe:	d410      	bmi.n	8001c22 <__swhatbuf_r+0x3e>
 8001c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c04:	e00e      	b.n	8001c24 <__swhatbuf_r+0x40>
 8001c06:	466a      	mov	r2, sp
 8001c08:	f000 f9a2 	bl	8001f50 <_fstat_r>
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	dbf2      	blt.n	8001bf6 <__swhatbuf_r+0x12>
 8001c10:	9a01      	ldr	r2, [sp, #4]
 8001c12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c1a:	425a      	negs	r2, r3
 8001c1c:	415a      	adcs	r2, r3
 8001c1e:	602a      	str	r2, [r5, #0]
 8001c20:	e7ee      	b.n	8001c00 <__swhatbuf_r+0x1c>
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	2000      	movs	r0, #0
 8001c26:	6023      	str	r3, [r4, #0]
 8001c28:	b016      	add	sp, #88	; 0x58
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}

08001c2c <__smakebuf_r>:
 8001c2c:	898b      	ldrh	r3, [r1, #12]
 8001c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c30:	079d      	lsls	r5, r3, #30
 8001c32:	4606      	mov	r6, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	d507      	bpl.n	8001c48 <__smakebuf_r+0x1c>
 8001c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c3c:	6023      	str	r3, [r4, #0]
 8001c3e:	6123      	str	r3, [r4, #16]
 8001c40:	2301      	movs	r3, #1
 8001c42:	6163      	str	r3, [r4, #20]
 8001c44:	b002      	add	sp, #8
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	ab01      	add	r3, sp, #4
 8001c4a:	466a      	mov	r2, sp
 8001c4c:	f7ff ffca 	bl	8001be4 <__swhatbuf_r>
 8001c50:	9900      	ldr	r1, [sp, #0]
 8001c52:	4605      	mov	r5, r0
 8001c54:	4630      	mov	r0, r6
 8001c56:	f000 f875 	bl	8001d44 <_malloc_r>
 8001c5a:	b948      	cbnz	r0, 8001c70 <__smakebuf_r+0x44>
 8001c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c60:	059a      	lsls	r2, r3, #22
 8001c62:	d4ef      	bmi.n	8001c44 <__smakebuf_r+0x18>
 8001c64:	f023 0303 	bic.w	r3, r3, #3
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	81a3      	strh	r3, [r4, #12]
 8001c6e:	e7e3      	b.n	8001c38 <__smakebuf_r+0xc>
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <__smakebuf_r+0x7c>)
 8001c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c74:	89a3      	ldrh	r3, [r4, #12]
 8001c76:	6020      	str	r0, [r4, #0]
 8001c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7c:	81a3      	strh	r3, [r4, #12]
 8001c7e:	9b00      	ldr	r3, [sp, #0]
 8001c80:	6120      	str	r0, [r4, #16]
 8001c82:	6163      	str	r3, [r4, #20]
 8001c84:	9b01      	ldr	r3, [sp, #4]
 8001c86:	b15b      	cbz	r3, 8001ca0 <__smakebuf_r+0x74>
 8001c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f000 f971 	bl	8001f74 <_isatty_r>
 8001c92:	b128      	cbz	r0, 8001ca0 <__smakebuf_r+0x74>
 8001c94:	89a3      	ldrh	r3, [r4, #12]
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	81a3      	strh	r3, [r4, #12]
 8001ca0:	89a3      	ldrh	r3, [r4, #12]
 8001ca2:	431d      	orrs	r5, r3
 8001ca4:	81a5      	strh	r5, [r4, #12]
 8001ca6:	e7cd      	b.n	8001c44 <__smakebuf_r+0x18>
 8001ca8:	08001a99 	.word	0x08001a99

08001cac <_free_r>:
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	4605      	mov	r5, r0
 8001cb0:	2900      	cmp	r1, #0
 8001cb2:	d043      	beq.n	8001d3c <_free_r+0x90>
 8001cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cb8:	1f0c      	subs	r4, r1, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bfb8      	it	lt
 8001cbe:	18e4      	addlt	r4, r4, r3
 8001cc0:	f000 f97a 	bl	8001fb8 <__malloc_lock>
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <_free_r+0x94>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	4610      	mov	r0, r2
 8001cca:	b933      	cbnz	r3, 8001cda <_free_r+0x2e>
 8001ccc:	6063      	str	r3, [r4, #4]
 8001cce:	6014      	str	r4, [r2, #0]
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cd6:	f000 b970 	b.w	8001fba <__malloc_unlock>
 8001cda:	42a3      	cmp	r3, r4
 8001cdc:	d90b      	bls.n	8001cf6 <_free_r+0x4a>
 8001cde:	6821      	ldr	r1, [r4, #0]
 8001ce0:	1862      	adds	r2, r4, r1
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	bf01      	itttt	eq
 8001ce6:	681a      	ldreq	r2, [r3, #0]
 8001ce8:	685b      	ldreq	r3, [r3, #4]
 8001cea:	1852      	addeq	r2, r2, r1
 8001cec:	6022      	streq	r2, [r4, #0]
 8001cee:	6063      	str	r3, [r4, #4]
 8001cf0:	6004      	str	r4, [r0, #0]
 8001cf2:	e7ed      	b.n	8001cd0 <_free_r+0x24>
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	b10a      	cbz	r2, 8001cfe <_free_r+0x52>
 8001cfa:	42a2      	cmp	r2, r4
 8001cfc:	d9fa      	bls.n	8001cf4 <_free_r+0x48>
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	1858      	adds	r0, r3, r1
 8001d02:	42a0      	cmp	r0, r4
 8001d04:	d10b      	bne.n	8001d1e <_free_r+0x72>
 8001d06:	6820      	ldr	r0, [r4, #0]
 8001d08:	4401      	add	r1, r0
 8001d0a:	1858      	adds	r0, r3, r1
 8001d0c:	4282      	cmp	r2, r0
 8001d0e:	6019      	str	r1, [r3, #0]
 8001d10:	d1de      	bne.n	8001cd0 <_free_r+0x24>
 8001d12:	6810      	ldr	r0, [r2, #0]
 8001d14:	6852      	ldr	r2, [r2, #4]
 8001d16:	4401      	add	r1, r0
 8001d18:	6019      	str	r1, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	e7d8      	b.n	8001cd0 <_free_r+0x24>
 8001d1e:	d902      	bls.n	8001d26 <_free_r+0x7a>
 8001d20:	230c      	movs	r3, #12
 8001d22:	602b      	str	r3, [r5, #0]
 8001d24:	e7d4      	b.n	8001cd0 <_free_r+0x24>
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	1821      	adds	r1, r4, r0
 8001d2a:	428a      	cmp	r2, r1
 8001d2c:	bf01      	itttt	eq
 8001d2e:	6811      	ldreq	r1, [r2, #0]
 8001d30:	6852      	ldreq	r2, [r2, #4]
 8001d32:	1809      	addeq	r1, r1, r0
 8001d34:	6021      	streq	r1, [r4, #0]
 8001d36:	6062      	str	r2, [r4, #4]
 8001d38:	605c      	str	r4, [r3, #4]
 8001d3a:	e7c9      	b.n	8001cd0 <_free_r+0x24>
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000098 	.word	0x20000098

08001d44 <_malloc_r>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	1ccd      	adds	r5, r1, #3
 8001d48:	f025 0503 	bic.w	r5, r5, #3
 8001d4c:	3508      	adds	r5, #8
 8001d4e:	2d0c      	cmp	r5, #12
 8001d50:	bf38      	it	cc
 8001d52:	250c      	movcc	r5, #12
 8001d54:	2d00      	cmp	r5, #0
 8001d56:	4606      	mov	r6, r0
 8001d58:	db01      	blt.n	8001d5e <_malloc_r+0x1a>
 8001d5a:	42a9      	cmp	r1, r5
 8001d5c:	d903      	bls.n	8001d66 <_malloc_r+0x22>
 8001d5e:	230c      	movs	r3, #12
 8001d60:	6033      	str	r3, [r6, #0]
 8001d62:	2000      	movs	r0, #0
 8001d64:	bd70      	pop	{r4, r5, r6, pc}
 8001d66:	f000 f927 	bl	8001fb8 <__malloc_lock>
 8001d6a:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <_malloc_r+0xac>)
 8001d6c:	6814      	ldr	r4, [r2, #0]
 8001d6e:	4621      	mov	r1, r4
 8001d70:	b991      	cbnz	r1, 8001d98 <_malloc_r+0x54>
 8001d72:	4c20      	ldr	r4, [pc, #128]	; (8001df4 <_malloc_r+0xb0>)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	b91b      	cbnz	r3, 8001d80 <_malloc_r+0x3c>
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 f873 	bl	8001e64 <_sbrk_r>
 8001d7e:	6020      	str	r0, [r4, #0]
 8001d80:	4629      	mov	r1, r5
 8001d82:	4630      	mov	r0, r6
 8001d84:	f000 f86e 	bl	8001e64 <_sbrk_r>
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	d124      	bne.n	8001dd6 <_malloc_r+0x92>
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	4630      	mov	r0, r6
 8001d90:	6033      	str	r3, [r6, #0]
 8001d92:	f000 f912 	bl	8001fba <__malloc_unlock>
 8001d96:	e7e4      	b.n	8001d62 <_malloc_r+0x1e>
 8001d98:	680b      	ldr	r3, [r1, #0]
 8001d9a:	1b5b      	subs	r3, r3, r5
 8001d9c:	d418      	bmi.n	8001dd0 <_malloc_r+0x8c>
 8001d9e:	2b0b      	cmp	r3, #11
 8001da0:	d90f      	bls.n	8001dc2 <_malloc_r+0x7e>
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	18cc      	adds	r4, r1, r3
 8001da6:	50cd      	str	r5, [r1, r3]
 8001da8:	4630      	mov	r0, r6
 8001daa:	f000 f906 	bl	8001fba <__malloc_unlock>
 8001dae:	f104 000b 	add.w	r0, r4, #11
 8001db2:	1d23      	adds	r3, r4, #4
 8001db4:	f020 0007 	bic.w	r0, r0, #7
 8001db8:	1ac3      	subs	r3, r0, r3
 8001dba:	d0d3      	beq.n	8001d64 <_malloc_r+0x20>
 8001dbc:	425a      	negs	r2, r3
 8001dbe:	50e2      	str	r2, [r4, r3]
 8001dc0:	e7d0      	b.n	8001d64 <_malloc_r+0x20>
 8001dc2:	684b      	ldr	r3, [r1, #4]
 8001dc4:	428c      	cmp	r4, r1
 8001dc6:	bf16      	itet	ne
 8001dc8:	6063      	strne	r3, [r4, #4]
 8001dca:	6013      	streq	r3, [r2, #0]
 8001dcc:	460c      	movne	r4, r1
 8001dce:	e7eb      	b.n	8001da8 <_malloc_r+0x64>
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	6849      	ldr	r1, [r1, #4]
 8001dd4:	e7cc      	b.n	8001d70 <_malloc_r+0x2c>
 8001dd6:	1cc4      	adds	r4, r0, #3
 8001dd8:	f024 0403 	bic.w	r4, r4, #3
 8001ddc:	42a0      	cmp	r0, r4
 8001dde:	d005      	beq.n	8001dec <_malloc_r+0xa8>
 8001de0:	1a21      	subs	r1, r4, r0
 8001de2:	4630      	mov	r0, r6
 8001de4:	f000 f83e 	bl	8001e64 <_sbrk_r>
 8001de8:	3001      	adds	r0, #1
 8001dea:	d0cf      	beq.n	8001d8c <_malloc_r+0x48>
 8001dec:	6025      	str	r5, [r4, #0]
 8001dee:	e7db      	b.n	8001da8 <_malloc_r+0x64>
 8001df0:	20000098 	.word	0x20000098
 8001df4:	2000009c 	.word	0x2000009c

08001df8 <_putc_r>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	4606      	mov	r6, r0
 8001e00:	b118      	cbz	r0, 8001e0a <_putc_r+0x12>
 8001e02:	6983      	ldr	r3, [r0, #24]
 8001e04:	b90b      	cbnz	r3, 8001e0a <_putc_r+0x12>
 8001e06:	f7ff fe63 	bl	8001ad0 <__sinit>
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <_putc_r+0x60>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d112      	bne.n	8001e36 <_putc_r+0x3e>
 8001e10:	6874      	ldr	r4, [r6, #4]
 8001e12:	68a3      	ldr	r3, [r4, #8]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	60a3      	str	r3, [r4, #8]
 8001e1a:	da16      	bge.n	8001e4a <_putc_r+0x52>
 8001e1c:	69a2      	ldr	r2, [r4, #24]
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	db02      	blt.n	8001e28 <_putc_r+0x30>
 8001e22:	b2eb      	uxtb	r3, r5
 8001e24:	2b0a      	cmp	r3, #10
 8001e26:	d110      	bne.n	8001e4a <_putc_r+0x52>
 8001e28:	4622      	mov	r2, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001e32:	f7ff bc9d 	b.w	8001770 <__swbuf_r>
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <_putc_r+0x64>)
 8001e38:	429c      	cmp	r4, r3
 8001e3a:	d101      	bne.n	8001e40 <_putc_r+0x48>
 8001e3c:	68b4      	ldr	r4, [r6, #8]
 8001e3e:	e7e8      	b.n	8001e12 <_putc_r+0x1a>
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <_putc_r+0x68>)
 8001e42:	429c      	cmp	r4, r3
 8001e44:	bf08      	it	eq
 8001e46:	68f4      	ldreq	r4, [r6, #12]
 8001e48:	e7e3      	b.n	8001e12 <_putc_r+0x1a>
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	b2e8      	uxtb	r0, r5
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	6022      	str	r2, [r4, #0]
 8001e52:	701d      	strb	r5, [r3, #0]
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
 8001e56:	bf00      	nop
 8001e58:	080025a4 	.word	0x080025a4
 8001e5c:	080025c4 	.word	0x080025c4
 8001e60:	08002584 	.word	0x08002584

08001e64 <_sbrk_r>:
 8001e64:	b538      	push	{r3, r4, r5, lr}
 8001e66:	2300      	movs	r3, #0
 8001e68:	4c05      	ldr	r4, [pc, #20]	; (8001e80 <_sbrk_r+0x1c>)
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	f7fe faf2 	bl	8000458 <_sbrk>
 8001e74:	1c43      	adds	r3, r0, #1
 8001e76:	d102      	bne.n	8001e7e <_sbrk_r+0x1a>
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	b103      	cbz	r3, 8001e7e <_sbrk_r+0x1a>
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	bd38      	pop	{r3, r4, r5, pc}
 8001e80:	20000190 	.word	0x20000190

08001e84 <__sread>:
 8001e84:	b510      	push	{r4, lr}
 8001e86:	460c      	mov	r4, r1
 8001e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e8c:	f000 f896 	bl	8001fbc <_read_r>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	bfab      	itete	ge
 8001e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e96:	89a3      	ldrhlt	r3, [r4, #12]
 8001e98:	181b      	addge	r3, r3, r0
 8001e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e9e:	bfac      	ite	ge
 8001ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ea2:	81a3      	strhlt	r3, [r4, #12]
 8001ea4:	bd10      	pop	{r4, pc}

08001ea6 <__swrite>:
 8001ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eaa:	461f      	mov	r7, r3
 8001eac:	898b      	ldrh	r3, [r1, #12]
 8001eae:	4605      	mov	r5, r0
 8001eb0:	05db      	lsls	r3, r3, #23
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	4616      	mov	r6, r2
 8001eb6:	d505      	bpl.n	8001ec4 <__swrite+0x1e>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec0:	f000 f868 	bl	8001f94 <_lseek_r>
 8001ec4:	89a3      	ldrh	r3, [r4, #12]
 8001ec6:	4632      	mov	r2, r6
 8001ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ecc:	81a3      	strh	r3, [r4, #12]
 8001ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001eda:	f000 b817 	b.w	8001f0c <_write_r>

08001ede <__sseek>:
 8001ede:	b510      	push	{r4, lr}
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee6:	f000 f855 	bl	8001f94 <_lseek_r>
 8001eea:	1c43      	adds	r3, r0, #1
 8001eec:	89a3      	ldrh	r3, [r4, #12]
 8001eee:	bf15      	itete	ne
 8001ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001efa:	81a3      	strheq	r3, [r4, #12]
 8001efc:	bf18      	it	ne
 8001efe:	81a3      	strhne	r3, [r4, #12]
 8001f00:	bd10      	pop	{r4, pc}

08001f02 <__sclose>:
 8001f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f06:	f000 b813 	b.w	8001f30 <_close_r>
	...

08001f0c <_write_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4605      	mov	r5, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	2200      	movs	r2, #0
 8001f16:	4c05      	ldr	r4, [pc, #20]	; (8001f2c <_write_r+0x20>)
 8001f18:	6022      	str	r2, [r4, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f000 f911 	bl	8002142 <_write>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	d102      	bne.n	8001f2a <_write_r+0x1e>
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	b103      	cbz	r3, 8001f2a <_write_r+0x1e>
 8001f28:	602b      	str	r3, [r5, #0]
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	20000190 	.word	0x20000190

08001f30 <_close_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	2300      	movs	r3, #0
 8001f34:	4c05      	ldr	r4, [pc, #20]	; (8001f4c <_close_r+0x1c>)
 8001f36:	4605      	mov	r5, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	6023      	str	r3, [r4, #0]
 8001f3c:	f000 f930 	bl	80021a0 <_close>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_close_r+0x1a>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_close_r+0x1a>
 8001f48:	602b      	str	r3, [r5, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	20000190 	.word	0x20000190

08001f50 <_fstat_r>:
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	2300      	movs	r3, #0
 8001f54:	4c06      	ldr	r4, [pc, #24]	; (8001f70 <_fstat_r+0x20>)
 8001f56:	4605      	mov	r5, r0
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	6023      	str	r3, [r4, #0]
 8001f5e:	f000 f966 	bl	800222e <_fstat>
 8001f62:	1c43      	adds	r3, r0, #1
 8001f64:	d102      	bne.n	8001f6c <_fstat_r+0x1c>
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	b103      	cbz	r3, 8001f6c <_fstat_r+0x1c>
 8001f6a:	602b      	str	r3, [r5, #0]
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000190 	.word	0x20000190

08001f74 <_isatty_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	2300      	movs	r3, #0
 8001f78:	4c05      	ldr	r4, [pc, #20]	; (8001f90 <_isatty_r+0x1c>)
 8001f7a:	4605      	mov	r5, r0
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	6023      	str	r3, [r4, #0]
 8001f80:	f000 fab8 	bl	80024f4 <_isatty>
 8001f84:	1c43      	adds	r3, r0, #1
 8001f86:	d102      	bne.n	8001f8e <_isatty_r+0x1a>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	b103      	cbz	r3, 8001f8e <_isatty_r+0x1a>
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	20000190 	.word	0x20000190

08001f94 <_lseek_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4605      	mov	r5, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4c05      	ldr	r4, [pc, #20]	; (8001fb4 <_lseek_r+0x20>)
 8001fa0:	6022      	str	r2, [r4, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f000 f8bb 	bl	800211e <_lseek>
 8001fa8:	1c43      	adds	r3, r0, #1
 8001faa:	d102      	bne.n	8001fb2 <_lseek_r+0x1e>
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	b103      	cbz	r3, 8001fb2 <_lseek_r+0x1e>
 8001fb0:	602b      	str	r3, [r5, #0]
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}
 8001fb4:	20000190 	.word	0x20000190

08001fb8 <__malloc_lock>:
 8001fb8:	4770      	bx	lr

08001fba <__malloc_unlock>:
 8001fba:	4770      	bx	lr

08001fbc <_read_r>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	4605      	mov	r5, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4c05      	ldr	r4, [pc, #20]	; (8001fdc <_read_r+0x20>)
 8001fc8:	6022      	str	r2, [r4, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f000 f850 	bl	8002070 <_read>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d102      	bne.n	8001fda <_read_r+0x1e>
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	b103      	cbz	r3, 8001fda <_read_r+0x1e>
 8001fd8:	602b      	str	r3, [r5, #0]
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	20000190 	.word	0x20000190

08001fe0 <findslot>:
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <findslot+0x2c>)
 8001fe2:	b510      	push	{r4, lr}
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	b118      	cbz	r0, 8001ff2 <findslot+0x12>
 8001fea:	6983      	ldr	r3, [r0, #24]
 8001fec:	b90b      	cbnz	r3, 8001ff2 <findslot+0x12>
 8001fee:	f7ff fd6f 	bl	8001ad0 <__sinit>
 8001ff2:	2c13      	cmp	r4, #19
 8001ff4:	d807      	bhi.n	8002006 <findslot+0x26>
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <findslot+0x30>)
 8001ff8:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	d002      	beq.n	8002006 <findslot+0x26>
 8002000:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002004:	bd10      	pop	{r4, pc}
 8002006:	2000      	movs	r0, #0
 8002008:	e7fc      	b.n	8002004 <findslot+0x24>
 800200a:	bf00      	nop
 800200c:	2000000c 	.word	0x2000000c
 8002010:	200000ac 	.word	0x200000ac

08002014 <checkerror>:
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	1c43      	adds	r3, r0, #1
 8002018:	4605      	mov	r5, r0
 800201a:	d109      	bne.n	8002030 <checkerror+0x1c>
 800201c:	f7ff fafe 	bl	800161c <__errno>
 8002020:	2413      	movs	r4, #19
 8002022:	4606      	mov	r6, r0
 8002024:	2700      	movs	r7, #0
 8002026:	4620      	mov	r0, r4
 8002028:	4639      	mov	r1, r7
 800202a:	beab      	bkpt	0x00ab
 800202c:	4604      	mov	r4, r0
 800202e:	6034      	str	r4, [r6, #0]
 8002030:	4628      	mov	r0, r5
 8002032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002034 <error>:
 8002034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002036:	4605      	mov	r5, r0
 8002038:	f7ff faf0 	bl	800161c <__errno>
 800203c:	2413      	movs	r4, #19
 800203e:	4606      	mov	r6, r0
 8002040:	2700      	movs	r7, #0
 8002042:	4620      	mov	r0, r4
 8002044:	4639      	mov	r1, r7
 8002046:	beab      	bkpt	0x00ab
 8002048:	4604      	mov	r4, r0
 800204a:	6034      	str	r4, [r6, #0]
 800204c:	4628      	mov	r0, r5
 800204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002050 <_swiread>:
 8002050:	b530      	push	{r4, r5, lr}
 8002052:	b085      	sub	sp, #20
 8002054:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002058:	9203      	str	r2, [sp, #12]
 800205a:	2406      	movs	r4, #6
 800205c:	ad01      	add	r5, sp, #4
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	beab      	bkpt	0x00ab
 8002064:	4604      	mov	r4, r0
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff ffd4 	bl	8002014 <checkerror>
 800206c:	b005      	add	sp, #20
 800206e:	bd30      	pop	{r4, r5, pc}

08002070 <_read>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	460e      	mov	r6, r1
 8002074:	4615      	mov	r5, r2
 8002076:	f7ff ffb3 	bl	8001fe0 <findslot>
 800207a:	4604      	mov	r4, r0
 800207c:	b930      	cbnz	r0, 800208c <_read+0x1c>
 800207e:	f7ff facd 	bl	800161c <__errno>
 8002082:	2309      	movs	r3, #9
 8002084:	6003      	str	r3, [r0, #0]
 8002086:	f04f 30ff 	mov.w	r0, #4294967295
 800208a:	bd70      	pop	{r4, r5, r6, pc}
 800208c:	462a      	mov	r2, r5
 800208e:	4631      	mov	r1, r6
 8002090:	6800      	ldr	r0, [r0, #0]
 8002092:	f7ff ffdd 	bl	8002050 <_swiread>
 8002096:	1c43      	adds	r3, r0, #1
 8002098:	bf1f      	itttt	ne
 800209a:	6863      	ldrne	r3, [r4, #4]
 800209c:	1a28      	subne	r0, r5, r0
 800209e:	181b      	addne	r3, r3, r0
 80020a0:	6063      	strne	r3, [r4, #4]
 80020a2:	e7f2      	b.n	800208a <_read+0x1a>

080020a4 <_swilseek>:
 80020a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020a6:	460c      	mov	r4, r1
 80020a8:	4616      	mov	r6, r2
 80020aa:	f7ff ff99 	bl	8001fe0 <findslot>
 80020ae:	4605      	mov	r5, r0
 80020b0:	b940      	cbnz	r0, 80020c4 <_swilseek+0x20>
 80020b2:	f7ff fab3 	bl	800161c <__errno>
 80020b6:	2309      	movs	r3, #9
 80020b8:	6003      	str	r3, [r0, #0]
 80020ba:	f04f 34ff 	mov.w	r4, #4294967295
 80020be:	4620      	mov	r0, r4
 80020c0:	b003      	add	sp, #12
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c4:	2e02      	cmp	r6, #2
 80020c6:	d903      	bls.n	80020d0 <_swilseek+0x2c>
 80020c8:	f7ff faa8 	bl	800161c <__errno>
 80020cc:	2316      	movs	r3, #22
 80020ce:	e7f3      	b.n	80020b8 <_swilseek+0x14>
 80020d0:	2e01      	cmp	r6, #1
 80020d2:	d112      	bne.n	80020fa <_swilseek+0x56>
 80020d4:	6843      	ldr	r3, [r0, #4]
 80020d6:	18e4      	adds	r4, r4, r3
 80020d8:	d4f6      	bmi.n	80020c8 <_swilseek+0x24>
 80020da:	682b      	ldr	r3, [r5, #0]
 80020dc:	260a      	movs	r6, #10
 80020de:	e9cd 3400 	strd	r3, r4, [sp]
 80020e2:	466f      	mov	r7, sp
 80020e4:	4630      	mov	r0, r6
 80020e6:	4639      	mov	r1, r7
 80020e8:	beab      	bkpt	0x00ab
 80020ea:	4606      	mov	r6, r0
 80020ec:	4630      	mov	r0, r6
 80020ee:	f7ff ff91 	bl	8002014 <checkerror>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	dbe1      	blt.n	80020ba <_swilseek+0x16>
 80020f6:	606c      	str	r4, [r5, #4]
 80020f8:	e7e1      	b.n	80020be <_swilseek+0x1a>
 80020fa:	2e02      	cmp	r6, #2
 80020fc:	d1ed      	bne.n	80020da <_swilseek+0x36>
 80020fe:	6803      	ldr	r3, [r0, #0]
 8002100:	af02      	add	r7, sp, #8
 8002102:	f847 3d08 	str.w	r3, [r7, #-8]!
 8002106:	260c      	movs	r6, #12
 8002108:	4630      	mov	r0, r6
 800210a:	4639      	mov	r1, r7
 800210c:	beab      	bkpt	0x00ab
 800210e:	4606      	mov	r6, r0
 8002110:	4630      	mov	r0, r6
 8002112:	f7ff ff7f 	bl	8002014 <checkerror>
 8002116:	1c43      	adds	r3, r0, #1
 8002118:	d0cf      	beq.n	80020ba <_swilseek+0x16>
 800211a:	4404      	add	r4, r0
 800211c:	e7dd      	b.n	80020da <_swilseek+0x36>

0800211e <_lseek>:
 800211e:	f7ff bfc1 	b.w	80020a4 <_swilseek>

08002122 <_swiwrite>:
 8002122:	b530      	push	{r4, r5, lr}
 8002124:	b085      	sub	sp, #20
 8002126:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800212a:	9203      	str	r2, [sp, #12]
 800212c:	2405      	movs	r4, #5
 800212e:	ad01      	add	r5, sp, #4
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	beab      	bkpt	0x00ab
 8002136:	4604      	mov	r4, r0
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ff6b 	bl	8002014 <checkerror>
 800213e:	b005      	add	sp, #20
 8002140:	bd30      	pop	{r4, r5, pc}

08002142 <_write>:
 8002142:	b570      	push	{r4, r5, r6, lr}
 8002144:	460e      	mov	r6, r1
 8002146:	4615      	mov	r5, r2
 8002148:	f7ff ff4a 	bl	8001fe0 <findslot>
 800214c:	4604      	mov	r4, r0
 800214e:	b930      	cbnz	r0, 800215e <_write+0x1c>
 8002150:	f7ff fa64 	bl	800161c <__errno>
 8002154:	2309      	movs	r3, #9
 8002156:	6003      	str	r3, [r0, #0]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	bd70      	pop	{r4, r5, r6, pc}
 800215e:	462a      	mov	r2, r5
 8002160:	4631      	mov	r1, r6
 8002162:	6800      	ldr	r0, [r0, #0]
 8002164:	f7ff ffdd 	bl	8002122 <_swiwrite>
 8002168:	1e02      	subs	r2, r0, #0
 800216a:	dbf5      	blt.n	8002158 <_write+0x16>
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	1aa8      	subs	r0, r5, r2
 8002170:	4403      	add	r3, r0
 8002172:	42aa      	cmp	r2, r5
 8002174:	6063      	str	r3, [r4, #4]
 8002176:	d1f1      	bne.n	800215c <_write+0x1a>
 8002178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff bf59 	b.w	8002034 <error>

08002182 <_swiclose>:
 8002182:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002184:	ad02      	add	r5, sp, #8
 8002186:	f845 0d04 	str.w	r0, [r5, #-4]!
 800218a:	2402      	movs	r4, #2
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	beab      	bkpt	0x00ab
 8002192:	4604      	mov	r4, r0
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff ff3d 	bl	8002014 <checkerror>
 800219a:	b003      	add	sp, #12
 800219c:	bd30      	pop	{r4, r5, pc}
	...

080021a0 <_close>:
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	4605      	mov	r5, r0
 80021a4:	f7ff ff1c 	bl	8001fe0 <findslot>
 80021a8:	4604      	mov	r4, r0
 80021aa:	b930      	cbnz	r0, 80021ba <_close+0x1a>
 80021ac:	f7ff fa36 	bl	800161c <__errno>
 80021b0:	2309      	movs	r3, #9
 80021b2:	6003      	str	r3, [r0, #0]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	bd38      	pop	{r3, r4, r5, pc}
 80021ba:	3d01      	subs	r5, #1
 80021bc:	2d01      	cmp	r5, #1
 80021be:	d809      	bhi.n	80021d4 <_close+0x34>
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <_close+0x48>)
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d104      	bne.n	80021d4 <_close+0x34>
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	6003      	str	r3, [r0, #0]
 80021d0:	2000      	movs	r0, #0
 80021d2:	e7f1      	b.n	80021b8 <_close+0x18>
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	f7ff ffd4 	bl	8002182 <_swiclose>
 80021da:	2800      	cmp	r0, #0
 80021dc:	d1ec      	bne.n	80021b8 <_close+0x18>
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	6023      	str	r3, [r4, #0]
 80021e4:	e7e8      	b.n	80021b8 <_close+0x18>
 80021e6:	bf00      	nop
 80021e8:	200000ac 	.word	0x200000ac

080021ec <_swistat>:
 80021ec:	b570      	push	{r4, r5, r6, lr}
 80021ee:	460c      	mov	r4, r1
 80021f0:	f7ff fef6 	bl	8001fe0 <findslot>
 80021f4:	4606      	mov	r6, r0
 80021f6:	b930      	cbnz	r0, 8002206 <_swistat+0x1a>
 80021f8:	f7ff fa10 	bl	800161c <__errno>
 80021fc:	2309      	movs	r3, #9
 80021fe:	6003      	str	r3, [r0, #0]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	6863      	ldr	r3, [r4, #4]
 8002208:	250c      	movs	r5, #12
 800220a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800220e:	6063      	str	r3, [r4, #4]
 8002210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002214:	6463      	str	r3, [r4, #68]	; 0x44
 8002216:	4628      	mov	r0, r5
 8002218:	4631      	mov	r1, r6
 800221a:	beab      	bkpt	0x00ab
 800221c:	4605      	mov	r5, r0
 800221e:	4628      	mov	r0, r5
 8002220:	f7ff fef8 	bl	8002014 <checkerror>
 8002224:	1c43      	adds	r3, r0, #1
 8002226:	bf1c      	itt	ne
 8002228:	6120      	strne	r0, [r4, #16]
 800222a:	2000      	movne	r0, #0
 800222c:	e7ea      	b.n	8002204 <_swistat+0x18>

0800222e <_fstat>:
 800222e:	460b      	mov	r3, r1
 8002230:	b510      	push	{r4, lr}
 8002232:	2100      	movs	r1, #0
 8002234:	4604      	mov	r4, r0
 8002236:	2258      	movs	r2, #88	; 0x58
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fa19 	bl	8001670 <memset>
 800223e:	4601      	mov	r1, r0
 8002240:	4620      	mov	r0, r4
 8002242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002246:	f7ff bfd1 	b.w	80021ec <_swistat>

0800224a <_stat>:
 800224a:	b538      	push	{r3, r4, r5, lr}
 800224c:	460d      	mov	r5, r1
 800224e:	4604      	mov	r4, r0
 8002250:	2258      	movs	r2, #88	; 0x58
 8002252:	2100      	movs	r1, #0
 8002254:	4628      	mov	r0, r5
 8002256:	f7ff fa0b 	bl	8001670 <memset>
 800225a:	4620      	mov	r0, r4
 800225c:	2100      	movs	r1, #0
 800225e:	f000 f811 	bl	8002284 <_swiopen>
 8002262:	1c43      	adds	r3, r0, #1
 8002264:	4604      	mov	r4, r0
 8002266:	d00b      	beq.n	8002280 <_stat+0x36>
 8002268:	686b      	ldr	r3, [r5, #4]
 800226a:	4629      	mov	r1, r5
 800226c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002270:	606b      	str	r3, [r5, #4]
 8002272:	f7ff ffbb 	bl	80021ec <_swistat>
 8002276:	4605      	mov	r5, r0
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff ff91 	bl	80021a0 <_close>
 800227e:	462c      	mov	r4, r5
 8002280:	4620      	mov	r0, r4
 8002282:	bd38      	pop	{r3, r4, r5, pc}

08002284 <_swiopen>:
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <_swiopen+0xb0>)
 8002286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800228a:	4682      	mov	sl, r0
 800228c:	460e      	mov	r6, r1
 800228e:	2500      	movs	r5, #0
 8002290:	4698      	mov	r8, r3
 8002292:	b096      	sub	sp, #88	; 0x58
 8002294:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002298:	00ef      	lsls	r7, r5, #3
 800229a:	1c61      	adds	r1, r4, #1
 800229c:	d036      	beq.n	800230c <_swiopen+0x88>
 800229e:	3501      	adds	r5, #1
 80022a0:	2d14      	cmp	r5, #20
 80022a2:	d1f7      	bne.n	8002294 <_swiopen+0x10>
 80022a4:	f7ff f9ba 	bl	800161c <__errno>
 80022a8:	2318      	movs	r3, #24
 80022aa:	f04f 34ff 	mov.w	r4, #4294967295
 80022ae:	6003      	str	r3, [r0, #0]
 80022b0:	e03c      	b.n	800232c <_swiopen+0xa8>
 80022b2:	f240 6301 	movw	r3, #1537	; 0x601
 80022b6:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80022ba:	07b2      	lsls	r2, r6, #30
 80022bc:	bf48      	it	mi
 80022be:	f044 0402 	orrmi.w	r4, r4, #2
 80022c2:	421e      	tst	r6, r3
 80022c4:	bf18      	it	ne
 80022c6:	f044 0404 	orrne.w	r4, r4, #4
 80022ca:	0733      	lsls	r3, r6, #28
 80022cc:	bf48      	it	mi
 80022ce:	f024 0404 	bicmi.w	r4, r4, #4
 80022d2:	4650      	mov	r0, sl
 80022d4:	bf48      	it	mi
 80022d6:	f044 0408 	orrmi.w	r4, r4, #8
 80022da:	f8cd a000 	str.w	sl, [sp]
 80022de:	f7fd ff35 	bl	800014c <strlen>
 80022e2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80022e6:	2401      	movs	r4, #1
 80022e8:	4620      	mov	r0, r4
 80022ea:	4649      	mov	r1, r9
 80022ec:	beab      	bkpt	0x00ab
 80022ee:	4604      	mov	r4, r0
 80022f0:	2c00      	cmp	r4, #0
 80022f2:	db06      	blt.n	8002302 <_swiopen+0x7e>
 80022f4:	2300      	movs	r3, #0
 80022f6:	4447      	add	r7, r8
 80022f8:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	462c      	mov	r4, r5
 8002300:	e014      	b.n	800232c <_swiopen+0xa8>
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff fe96 	bl	8002034 <error>
 8002308:	4604      	mov	r4, r0
 800230a:	e00f      	b.n	800232c <_swiopen+0xa8>
 800230c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002310:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002314:	46e9      	mov	r9, sp
 8002316:	d1cc      	bne.n	80022b2 <_swiopen+0x2e>
 8002318:	4649      	mov	r1, r9
 800231a:	4650      	mov	r0, sl
 800231c:	f7ff ff95 	bl	800224a <_stat>
 8002320:	3001      	adds	r0, #1
 8002322:	d0c6      	beq.n	80022b2 <_swiopen+0x2e>
 8002324:	f7ff f97a 	bl	800161c <__errno>
 8002328:	2311      	movs	r3, #17
 800232a:	6003      	str	r3, [r0, #0]
 800232c:	4620      	mov	r0, r4
 800232e:	b016      	add	sp, #88	; 0x58
 8002330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002334:	200000ac 	.word	0x200000ac

08002338 <_get_semihosting_exts>:
 8002338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800233c:	4607      	mov	r7, r0
 800233e:	4688      	mov	r8, r1
 8002340:	4829      	ldr	r0, [pc, #164]	; (80023e8 <_get_semihosting_exts+0xb0>)
 8002342:	2100      	movs	r1, #0
 8002344:	4615      	mov	r5, r2
 8002346:	f7ff ff9d 	bl	8002284 <_swiopen>
 800234a:	4604      	mov	r4, r0
 800234c:	462a      	mov	r2, r5
 800234e:	2100      	movs	r1, #0
 8002350:	4638      	mov	r0, r7
 8002352:	f7ff f98d 	bl	8001670 <memset>
 8002356:	1c63      	adds	r3, r4, #1
 8002358:	d015      	beq.n	8002386 <_get_semihosting_exts+0x4e>
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff fe40 	bl	8001fe0 <findslot>
 8002360:	260c      	movs	r6, #12
 8002362:	4681      	mov	r9, r0
 8002364:	4630      	mov	r0, r6
 8002366:	4649      	mov	r1, r9
 8002368:	beab      	bkpt	0x00ab
 800236a:	4606      	mov	r6, r0
 800236c:	4630      	mov	r0, r6
 800236e:	f7ff fe51 	bl	8002014 <checkerror>
 8002372:	2803      	cmp	r0, #3
 8002374:	dd02      	ble.n	800237c <_get_semihosting_exts+0x44>
 8002376:	3803      	subs	r0, #3
 8002378:	42a8      	cmp	r0, r5
 800237a:	dc08      	bgt.n	800238e <_get_semihosting_exts+0x56>
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff ff0f 	bl	80021a0 <_close>
 8002382:	f04f 34ff 	mov.w	r4, #4294967295
 8002386:	4620      	mov	r0, r4
 8002388:	b003      	add	sp, #12
 800238a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800238e:	2204      	movs	r2, #4
 8002390:	4620      	mov	r0, r4
 8002392:	eb0d 0102 	add.w	r1, sp, r2
 8002396:	f7ff fe6b 	bl	8002070 <_read>
 800239a:	2803      	cmp	r0, #3
 800239c:	ddee      	ble.n	800237c <_get_semihosting_exts+0x44>
 800239e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023a2:	2b53      	cmp	r3, #83	; 0x53
 80023a4:	d1ea      	bne.n	800237c <_get_semihosting_exts+0x44>
 80023a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80023aa:	2b48      	cmp	r3, #72	; 0x48
 80023ac:	d1e6      	bne.n	800237c <_get_semihosting_exts+0x44>
 80023ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80023b2:	2b46      	cmp	r3, #70	; 0x46
 80023b4:	d1e2      	bne.n	800237c <_get_semihosting_exts+0x44>
 80023b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023ba:	2b42      	cmp	r3, #66	; 0x42
 80023bc:	d1de      	bne.n	800237c <_get_semihosting_exts+0x44>
 80023be:	2201      	movs	r2, #1
 80023c0:	4641      	mov	r1, r8
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff fe6e 	bl	80020a4 <_swilseek>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	dbd7      	blt.n	800237c <_get_semihosting_exts+0x44>
 80023cc:	462a      	mov	r2, r5
 80023ce:	4639      	mov	r1, r7
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7ff fe4d 	bl	8002070 <_read>
 80023d6:	4605      	mov	r5, r0
 80023d8:	4620      	mov	r0, r4
 80023da:	f7ff fee1 	bl	80021a0 <_close>
 80023de:	4628      	mov	r0, r5
 80023e0:	f7ff fe18 	bl	8002014 <checkerror>
 80023e4:	4604      	mov	r4, r0
 80023e6:	e7ce      	b.n	8002386 <_get_semihosting_exts+0x4e>
 80023e8:	080025e4 	.word	0x080025e4

080023ec <initialise_semihosting_exts>:
 80023ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023ee:	2100      	movs	r1, #0
 80023f0:	2201      	movs	r2, #1
 80023f2:	4d09      	ldr	r5, [pc, #36]	; (8002418 <initialise_semihosting_exts+0x2c>)
 80023f4:	4c09      	ldr	r4, [pc, #36]	; (800241c <initialise_semihosting_exts+0x30>)
 80023f6:	a801      	add	r0, sp, #4
 80023f8:	6029      	str	r1, [r5, #0]
 80023fa:	6022      	str	r2, [r4, #0]
 80023fc:	f7ff ff9c 	bl	8002338 <_get_semihosting_exts>
 8002400:	2800      	cmp	r0, #0
 8002402:	dd07      	ble.n	8002414 <initialise_semihosting_exts+0x28>
 8002404:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002408:	f003 0201 	and.w	r2, r3, #1
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	602a      	str	r2, [r5, #0]
 8002412:	6023      	str	r3, [r4, #0]
 8002414:	b003      	add	sp, #12
 8002416:	bd30      	pop	{r4, r5, pc}
 8002418:	20000070 	.word	0x20000070
 800241c:	20000074 	.word	0x20000074

08002420 <_has_ext_stdout_stderr>:
 8002420:	b510      	push	{r4, lr}
 8002422:	4c04      	ldr	r4, [pc, #16]	; (8002434 <_has_ext_stdout_stderr+0x14>)
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	2a00      	cmp	r2, #0
 8002428:	da01      	bge.n	800242e <_has_ext_stdout_stderr+0xe>
 800242a:	f7ff ffdf 	bl	80023ec <initialise_semihosting_exts>
 800242e:	6820      	ldr	r0, [r4, #0]
 8002430:	bd10      	pop	{r4, pc}
 8002432:	bf00      	nop
 8002434:	20000074 	.word	0x20000074

08002438 <initialise_monitor_handles>:
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243c:	2303      	movs	r3, #3
 800243e:	2400      	movs	r4, #0
 8002440:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80024f0 <initialise_monitor_handles+0xb8>
 8002444:	b085      	sub	sp, #20
 8002446:	f8cd 9004 	str.w	r9, [sp, #4]
 800244a:	f10d 0804 	add.w	r8, sp, #4
 800244e:	9303      	str	r3, [sp, #12]
 8002450:	2501      	movs	r5, #1
 8002452:	9402      	str	r4, [sp, #8]
 8002454:	4628      	mov	r0, r5
 8002456:	4641      	mov	r1, r8
 8002458:	beab      	bkpt	0x00ab
 800245a:	4605      	mov	r5, r0
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <initialise_monitor_handles+0xa8>)
 800245e:	4623      	mov	r3, r4
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	4614      	mov	r4, r2
 8002466:	4e1f      	ldr	r6, [pc, #124]	; (80024e4 <initialise_monitor_handles+0xac>)
 8002468:	6035      	str	r5, [r6, #0]
 800246a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800246e:	3301      	adds	r3, #1
 8002470:	2b14      	cmp	r3, #20
 8002472:	d1fa      	bne.n	800246a <initialise_monitor_handles+0x32>
 8002474:	f7ff ffd4 	bl	8002420 <_has_ext_stdout_stderr>
 8002478:	4d1b      	ldr	r5, [pc, #108]	; (80024e8 <initialise_monitor_handles+0xb0>)
 800247a:	b1d0      	cbz	r0, 80024b2 <initialise_monitor_handles+0x7a>
 800247c:	f04f 0a03 	mov.w	sl, #3
 8002480:	2304      	movs	r3, #4
 8002482:	f8cd 9004 	str.w	r9, [sp, #4]
 8002486:	2701      	movs	r7, #1
 8002488:	f8cd a00c 	str.w	sl, [sp, #12]
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	4638      	mov	r0, r7
 8002490:	4641      	mov	r1, r8
 8002492:	beab      	bkpt	0x00ab
 8002494:	4683      	mov	fp, r0
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <initialise_monitor_handles+0xb4>)
 8002498:	f8cd 9004 	str.w	r9, [sp, #4]
 800249c:	f8c3 b000 	str.w	fp, [r3]
 80024a0:	2308      	movs	r3, #8
 80024a2:	f8cd a00c 	str.w	sl, [sp, #12]
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	4638      	mov	r0, r7
 80024aa:	4641      	mov	r1, r8
 80024ac:	beab      	bkpt	0x00ab
 80024ae:	4607      	mov	r7, r0
 80024b0:	602f      	str	r7, [r5, #0]
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	bf02      	ittt	eq
 80024b8:	4b0c      	ldreq	r3, [pc, #48]	; (80024ec <initialise_monitor_handles+0xb4>)
 80024ba:	681b      	ldreq	r3, [r3, #0]
 80024bc:	602b      	streq	r3, [r5, #0]
 80024be:	6833      	ldr	r3, [r6, #0]
 80024c0:	2600      	movs	r6, #0
 80024c2:	6023      	str	r3, [r4, #0]
 80024c4:	6066      	str	r6, [r4, #4]
 80024c6:	f7ff ffab 	bl	8002420 <_has_ext_stdout_stderr>
 80024ca:	b130      	cbz	r0, 80024da <initialise_monitor_handles+0xa2>
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <initialise_monitor_handles+0xb4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80024da:	b005      	add	sp, #20
 80024dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e0:	200000ac 	.word	0x200000ac
 80024e4:	200000a4 	.word	0x200000a4
 80024e8:	200000a0 	.word	0x200000a0
 80024ec:	200000a8 	.word	0x200000a8
 80024f0:	080025fa 	.word	0x080025fa

080024f4 <_isatty>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	f7ff fd73 	bl	8001fe0 <findslot>
 80024fa:	2509      	movs	r5, #9
 80024fc:	4604      	mov	r4, r0
 80024fe:	b920      	cbnz	r0, 800250a <_isatty+0x16>
 8002500:	f7ff f88c 	bl	800161c <__errno>
 8002504:	6005      	str	r5, [r0, #0]
 8002506:	4620      	mov	r0, r4
 8002508:	bd70      	pop	{r4, r5, r6, pc}
 800250a:	4628      	mov	r0, r5
 800250c:	4621      	mov	r1, r4
 800250e:	beab      	bkpt	0x00ab
 8002510:	4604      	mov	r4, r0
 8002512:	2c01      	cmp	r4, #1
 8002514:	d0f7      	beq.n	8002506 <_isatty+0x12>
 8002516:	f7ff f881 	bl	800161c <__errno>
 800251a:	2400      	movs	r4, #0
 800251c:	4606      	mov	r6, r0
 800251e:	2513      	movs	r5, #19
 8002520:	4628      	mov	r0, r5
 8002522:	4621      	mov	r1, r4
 8002524:	beab      	bkpt	0x00ab
 8002526:	4605      	mov	r5, r0
 8002528:	6035      	str	r5, [r6, #0]
 800252a:	e7ec      	b.n	8002506 <_isatty+0x12>

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
